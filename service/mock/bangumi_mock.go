// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	entModel "github.com/nuomizi-fw/stargazer/ent"
	"github.com/nuomizi-fw/stargazer/service"
	"sync"
)

// Ensure, that BangumiServiceMock does implement service.BangumiService.
// If this is not the case, regenerate this file with moq.
var _ service.BangumiService = &BangumiServiceMock{}

// BangumiServiceMock is a mock implementation of service.BangumiService.
//
//	func TestSomethingThatUsesBangumiService(t *testing.T) {
//
//		// make and configure a mocked service.BangumiService
//		mockedBangumiService := &BangumiServiceMock{
//			CreateBangumiFunc: func(bangumi *entModel.Bangumi) error {
//				panic("mock out the CreateBangumi method")
//			},
//			CreateCastMemberFunc: func(castMember *entModel.CastMember) error {
//				panic("mock out the CreateCastMember method")
//			},
//			CreateEpisodeFunc: func(episode *entModel.Episode) error {
//				panic("mock out the CreateEpisode method")
//			},
//			CreateSeasonFunc: func(season *entModel.Season) error {
//				panic("mock out the CreateSeason method")
//			},
//			DeleteBangumiFunc: func(id int) error {
//				panic("mock out the DeleteBangumi method")
//			},
//			DeleteCastMemberFunc: func(id int) error {
//				panic("mock out the DeleteCastMember method")
//			},
//			DeleteEpisodeFunc: func(id int) error {
//				panic("mock out the DeleteEpisode method")
//			},
//			DeleteSeasonFunc: func(id int) error {
//				panic("mock out the DeleteSeason method")
//			},
//			GetBangumiFunc: func(id int) (*entModel.Bangumi, error) {
//				panic("mock out the GetBangumi method")
//			},
//			GetCastMemberFunc: func(id int) (*entModel.CastMember, error) {
//				panic("mock out the GetCastMember method")
//			},
//			GetEpisodeFunc: func(id int) (*entModel.Episode, error) {
//				panic("mock out the GetEpisode method")
//			},
//			GetSeasonFunc: func(id int) (*entModel.Season, error) {
//				panic("mock out the GetSeason method")
//			},
//			ListBangumisFunc: func(page int, pageSize int) ([]*entModel.Bangumi, error) {
//				panic("mock out the ListBangumis method")
//			},
//			ListCastMembersFunc: func(seasonID int) ([]*entModel.CastMember, error) {
//				panic("mock out the ListCastMembers method")
//			},
//			ListEpisodesFunc: func(seasonID int) ([]*entModel.Episode, error) {
//				panic("mock out the ListEpisodes method")
//			},
//			ListSeasonsFunc: func(bangumiID int) ([]*entModel.Season, error) {
//				panic("mock out the ListSeasons method")
//			},
//			ScrapeAndUpdateBangumiFunc: func(id int) error {
//				panic("mock out the ScrapeAndUpdateBangumi method")
//			},
//			ScrapeAndUpdateEpisodeFunc: func(seasonID int, episodeID int) error {
//				panic("mock out the ScrapeAndUpdateEpisode method")
//			},
//			ScrapeAndUpdateSeasonFunc: func(bangumiID int, seasonID int) error {
//				panic("mock out the ScrapeAndUpdateSeason method")
//			},
//			SearchBangumisFunc: func(query string) ([]*entModel.Bangumi, error) {
//				panic("mock out the SearchBangumis method")
//			},
//			UpdateBangumiFunc: func(id int, bangumi *entModel.Bangumi) error {
//				panic("mock out the UpdateBangumi method")
//			},
//			UpdateCastMemberFunc: func(id int, castMember *entModel.CastMember) error {
//				panic("mock out the UpdateCastMember method")
//			},
//			UpdateEpisodeFunc: func(id int, episode *entModel.Episode) error {
//				panic("mock out the UpdateEpisode method")
//			},
//			UpdateSeasonFunc: func(id int, season *entModel.Season) error {
//				panic("mock out the UpdateSeason method")
//			},
//		}
//
//		// use mockedBangumiService in code that requires service.BangumiService
//		// and then make assertions.
//
//	}
type BangumiServiceMock struct {
	// CreateBangumiFunc mocks the CreateBangumi method.
	CreateBangumiFunc func(bangumi *entModel.Bangumi) error

	// CreateCastMemberFunc mocks the CreateCastMember method.
	CreateCastMemberFunc func(castMember *entModel.CastMember) error

	// CreateEpisodeFunc mocks the CreateEpisode method.
	CreateEpisodeFunc func(episode *entModel.Episode) error

	// CreateSeasonFunc mocks the CreateSeason method.
	CreateSeasonFunc func(season *entModel.Season) error

	// DeleteBangumiFunc mocks the DeleteBangumi method.
	DeleteBangumiFunc func(id int) error

	// DeleteCastMemberFunc mocks the DeleteCastMember method.
	DeleteCastMemberFunc func(id int) error

	// DeleteEpisodeFunc mocks the DeleteEpisode method.
	DeleteEpisodeFunc func(id int) error

	// DeleteSeasonFunc mocks the DeleteSeason method.
	DeleteSeasonFunc func(id int) error

	// GetBangumiFunc mocks the GetBangumi method.
	GetBangumiFunc func(id int) (*entModel.Bangumi, error)

	// GetCastMemberFunc mocks the GetCastMember method.
	GetCastMemberFunc func(id int) (*entModel.CastMember, error)

	// GetEpisodeFunc mocks the GetEpisode method.
	GetEpisodeFunc func(id int) (*entModel.Episode, error)

	// GetSeasonFunc mocks the GetSeason method.
	GetSeasonFunc func(id int) (*entModel.Season, error)

	// ListBangumisFunc mocks the ListBangumis method.
	ListBangumisFunc func(page int, pageSize int) ([]*entModel.Bangumi, error)

	// ListCastMembersFunc mocks the ListCastMembers method.
	ListCastMembersFunc func(seasonID int) ([]*entModel.CastMember, error)

	// ListEpisodesFunc mocks the ListEpisodes method.
	ListEpisodesFunc func(seasonID int) ([]*entModel.Episode, error)

	// ListSeasonsFunc mocks the ListSeasons method.
	ListSeasonsFunc func(bangumiID int) ([]*entModel.Season, error)

	// ScrapeAndUpdateBangumiFunc mocks the ScrapeAndUpdateBangumi method.
	ScrapeAndUpdateBangumiFunc func(id int) error

	// ScrapeAndUpdateEpisodeFunc mocks the ScrapeAndUpdateEpisode method.
	ScrapeAndUpdateEpisodeFunc func(seasonID int, episodeID int) error

	// ScrapeAndUpdateSeasonFunc mocks the ScrapeAndUpdateSeason method.
	ScrapeAndUpdateSeasonFunc func(bangumiID int, seasonID int) error

	// SearchBangumisFunc mocks the SearchBangumis method.
	SearchBangumisFunc func(query string) ([]*entModel.Bangumi, error)

	// UpdateBangumiFunc mocks the UpdateBangumi method.
	UpdateBangumiFunc func(id int, bangumi *entModel.Bangumi) error

	// UpdateCastMemberFunc mocks the UpdateCastMember method.
	UpdateCastMemberFunc func(id int, castMember *entModel.CastMember) error

	// UpdateEpisodeFunc mocks the UpdateEpisode method.
	UpdateEpisodeFunc func(id int, episode *entModel.Episode) error

	// UpdateSeasonFunc mocks the UpdateSeason method.
	UpdateSeasonFunc func(id int, season *entModel.Season) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateBangumi holds details about calls to the CreateBangumi method.
		CreateBangumi []struct {
			// Bangumi is the bangumi argument value.
			Bangumi *entModel.Bangumi
		}
		// CreateCastMember holds details about calls to the CreateCastMember method.
		CreateCastMember []struct {
			// CastMember is the castMember argument value.
			CastMember *entModel.CastMember
		}
		// CreateEpisode holds details about calls to the CreateEpisode method.
		CreateEpisode []struct {
			// Episode is the episode argument value.
			Episode *entModel.Episode
		}
		// CreateSeason holds details about calls to the CreateSeason method.
		CreateSeason []struct {
			// Season is the season argument value.
			Season *entModel.Season
		}
		// DeleteBangumi holds details about calls to the DeleteBangumi method.
		DeleteBangumi []struct {
			// ID is the id argument value.
			ID int
		}
		// DeleteCastMember holds details about calls to the DeleteCastMember method.
		DeleteCastMember []struct {
			// ID is the id argument value.
			ID int
		}
		// DeleteEpisode holds details about calls to the DeleteEpisode method.
		DeleteEpisode []struct {
			// ID is the id argument value.
			ID int
		}
		// DeleteSeason holds details about calls to the DeleteSeason method.
		DeleteSeason []struct {
			// ID is the id argument value.
			ID int
		}
		// GetBangumi holds details about calls to the GetBangumi method.
		GetBangumi []struct {
			// ID is the id argument value.
			ID int
		}
		// GetCastMember holds details about calls to the GetCastMember method.
		GetCastMember []struct {
			// ID is the id argument value.
			ID int
		}
		// GetEpisode holds details about calls to the GetEpisode method.
		GetEpisode []struct {
			// ID is the id argument value.
			ID int
		}
		// GetSeason holds details about calls to the GetSeason method.
		GetSeason []struct {
			// ID is the id argument value.
			ID int
		}
		// ListBangumis holds details about calls to the ListBangumis method.
		ListBangumis []struct {
			// Page is the page argument value.
			Page int
			// PageSize is the pageSize argument value.
			PageSize int
		}
		// ListCastMembers holds details about calls to the ListCastMembers method.
		ListCastMembers []struct {
			// SeasonID is the seasonID argument value.
			SeasonID int
		}
		// ListEpisodes holds details about calls to the ListEpisodes method.
		ListEpisodes []struct {
			// SeasonID is the seasonID argument value.
			SeasonID int
		}
		// ListSeasons holds details about calls to the ListSeasons method.
		ListSeasons []struct {
			// BangumiID is the bangumiID argument value.
			BangumiID int
		}
		// ScrapeAndUpdateBangumi holds details about calls to the ScrapeAndUpdateBangumi method.
		ScrapeAndUpdateBangumi []struct {
			// ID is the id argument value.
			ID int
		}
		// ScrapeAndUpdateEpisode holds details about calls to the ScrapeAndUpdateEpisode method.
		ScrapeAndUpdateEpisode []struct {
			// SeasonID is the seasonID argument value.
			SeasonID int
			// EpisodeID is the episodeID argument value.
			EpisodeID int
		}
		// ScrapeAndUpdateSeason holds details about calls to the ScrapeAndUpdateSeason method.
		ScrapeAndUpdateSeason []struct {
			// BangumiID is the bangumiID argument value.
			BangumiID int
			// SeasonID is the seasonID argument value.
			SeasonID int
		}
		// SearchBangumis holds details about calls to the SearchBangumis method.
		SearchBangumis []struct {
			// Query is the query argument value.
			Query string
		}
		// UpdateBangumi holds details about calls to the UpdateBangumi method.
		UpdateBangumi []struct {
			// ID is the id argument value.
			ID int
			// Bangumi is the bangumi argument value.
			Bangumi *entModel.Bangumi
		}
		// UpdateCastMember holds details about calls to the UpdateCastMember method.
		UpdateCastMember []struct {
			// ID is the id argument value.
			ID int
			// CastMember is the castMember argument value.
			CastMember *entModel.CastMember
		}
		// UpdateEpisode holds details about calls to the UpdateEpisode method.
		UpdateEpisode []struct {
			// ID is the id argument value.
			ID int
			// Episode is the episode argument value.
			Episode *entModel.Episode
		}
		// UpdateSeason holds details about calls to the UpdateSeason method.
		UpdateSeason []struct {
			// ID is the id argument value.
			ID int
			// Season is the season argument value.
			Season *entModel.Season
		}
	}
	lockCreateBangumi          sync.RWMutex
	lockCreateCastMember       sync.RWMutex
	lockCreateEpisode          sync.RWMutex
	lockCreateSeason           sync.RWMutex
	lockDeleteBangumi          sync.RWMutex
	lockDeleteCastMember       sync.RWMutex
	lockDeleteEpisode          sync.RWMutex
	lockDeleteSeason           sync.RWMutex
	lockGetBangumi             sync.RWMutex
	lockGetCastMember          sync.RWMutex
	lockGetEpisode             sync.RWMutex
	lockGetSeason              sync.RWMutex
	lockListBangumis           sync.RWMutex
	lockListCastMembers        sync.RWMutex
	lockListEpisodes           sync.RWMutex
	lockListSeasons            sync.RWMutex
	lockScrapeAndUpdateBangumi sync.RWMutex
	lockScrapeAndUpdateEpisode sync.RWMutex
	lockScrapeAndUpdateSeason  sync.RWMutex
	lockSearchBangumis         sync.RWMutex
	lockUpdateBangumi          sync.RWMutex
	lockUpdateCastMember       sync.RWMutex
	lockUpdateEpisode          sync.RWMutex
	lockUpdateSeason           sync.RWMutex
}

// CreateBangumi calls CreateBangumiFunc.
func (mock *BangumiServiceMock) CreateBangumi(bangumi *entModel.Bangumi) error {
	if mock.CreateBangumiFunc == nil {
		panic("BangumiServiceMock.CreateBangumiFunc: method is nil but BangumiService.CreateBangumi was just called")
	}
	callInfo := struct {
		Bangumi *entModel.Bangumi
	}{
		Bangumi: bangumi,
	}
	mock.lockCreateBangumi.Lock()
	mock.calls.CreateBangumi = append(mock.calls.CreateBangumi, callInfo)
	mock.lockCreateBangumi.Unlock()
	return mock.CreateBangumiFunc(bangumi)
}

// CreateBangumiCalls gets all the calls that were made to CreateBangumi.
// Check the length with:
//
//	len(mockedBangumiService.CreateBangumiCalls())
func (mock *BangumiServiceMock) CreateBangumiCalls() []struct {
	Bangumi *entModel.Bangumi
} {
	var calls []struct {
		Bangumi *entModel.Bangumi
	}
	mock.lockCreateBangumi.RLock()
	calls = mock.calls.CreateBangumi
	mock.lockCreateBangumi.RUnlock()
	return calls
}

// CreateCastMember calls CreateCastMemberFunc.
func (mock *BangumiServiceMock) CreateCastMember(castMember *entModel.CastMember) error {
	if mock.CreateCastMemberFunc == nil {
		panic("BangumiServiceMock.CreateCastMemberFunc: method is nil but BangumiService.CreateCastMember was just called")
	}
	callInfo := struct {
		CastMember *entModel.CastMember
	}{
		CastMember: castMember,
	}
	mock.lockCreateCastMember.Lock()
	mock.calls.CreateCastMember = append(mock.calls.CreateCastMember, callInfo)
	mock.lockCreateCastMember.Unlock()
	return mock.CreateCastMemberFunc(castMember)
}

// CreateCastMemberCalls gets all the calls that were made to CreateCastMember.
// Check the length with:
//
//	len(mockedBangumiService.CreateCastMemberCalls())
func (mock *BangumiServiceMock) CreateCastMemberCalls() []struct {
	CastMember *entModel.CastMember
} {
	var calls []struct {
		CastMember *entModel.CastMember
	}
	mock.lockCreateCastMember.RLock()
	calls = mock.calls.CreateCastMember
	mock.lockCreateCastMember.RUnlock()
	return calls
}

// CreateEpisode calls CreateEpisodeFunc.
func (mock *BangumiServiceMock) CreateEpisode(episode *entModel.Episode) error {
	if mock.CreateEpisodeFunc == nil {
		panic("BangumiServiceMock.CreateEpisodeFunc: method is nil but BangumiService.CreateEpisode was just called")
	}
	callInfo := struct {
		Episode *entModel.Episode
	}{
		Episode: episode,
	}
	mock.lockCreateEpisode.Lock()
	mock.calls.CreateEpisode = append(mock.calls.CreateEpisode, callInfo)
	mock.lockCreateEpisode.Unlock()
	return mock.CreateEpisodeFunc(episode)
}

// CreateEpisodeCalls gets all the calls that were made to CreateEpisode.
// Check the length with:
//
//	len(mockedBangumiService.CreateEpisodeCalls())
func (mock *BangumiServiceMock) CreateEpisodeCalls() []struct {
	Episode *entModel.Episode
} {
	var calls []struct {
		Episode *entModel.Episode
	}
	mock.lockCreateEpisode.RLock()
	calls = mock.calls.CreateEpisode
	mock.lockCreateEpisode.RUnlock()
	return calls
}

// CreateSeason calls CreateSeasonFunc.
func (mock *BangumiServiceMock) CreateSeason(season *entModel.Season) error {
	if mock.CreateSeasonFunc == nil {
		panic("BangumiServiceMock.CreateSeasonFunc: method is nil but BangumiService.CreateSeason was just called")
	}
	callInfo := struct {
		Season *entModel.Season
	}{
		Season: season,
	}
	mock.lockCreateSeason.Lock()
	mock.calls.CreateSeason = append(mock.calls.CreateSeason, callInfo)
	mock.lockCreateSeason.Unlock()
	return mock.CreateSeasonFunc(season)
}

// CreateSeasonCalls gets all the calls that were made to CreateSeason.
// Check the length with:
//
//	len(mockedBangumiService.CreateSeasonCalls())
func (mock *BangumiServiceMock) CreateSeasonCalls() []struct {
	Season *entModel.Season
} {
	var calls []struct {
		Season *entModel.Season
	}
	mock.lockCreateSeason.RLock()
	calls = mock.calls.CreateSeason
	mock.lockCreateSeason.RUnlock()
	return calls
}

// DeleteBangumi calls DeleteBangumiFunc.
func (mock *BangumiServiceMock) DeleteBangumi(id int) error {
	if mock.DeleteBangumiFunc == nil {
		panic("BangumiServiceMock.DeleteBangumiFunc: method is nil but BangumiService.DeleteBangumi was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockDeleteBangumi.Lock()
	mock.calls.DeleteBangumi = append(mock.calls.DeleteBangumi, callInfo)
	mock.lockDeleteBangumi.Unlock()
	return mock.DeleteBangumiFunc(id)
}

// DeleteBangumiCalls gets all the calls that were made to DeleteBangumi.
// Check the length with:
//
//	len(mockedBangumiService.DeleteBangumiCalls())
func (mock *BangumiServiceMock) DeleteBangumiCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockDeleteBangumi.RLock()
	calls = mock.calls.DeleteBangumi
	mock.lockDeleteBangumi.RUnlock()
	return calls
}

// DeleteCastMember calls DeleteCastMemberFunc.
func (mock *BangumiServiceMock) DeleteCastMember(id int) error {
	if mock.DeleteCastMemberFunc == nil {
		panic("BangumiServiceMock.DeleteCastMemberFunc: method is nil but BangumiService.DeleteCastMember was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockDeleteCastMember.Lock()
	mock.calls.DeleteCastMember = append(mock.calls.DeleteCastMember, callInfo)
	mock.lockDeleteCastMember.Unlock()
	return mock.DeleteCastMemberFunc(id)
}

// DeleteCastMemberCalls gets all the calls that were made to DeleteCastMember.
// Check the length with:
//
//	len(mockedBangumiService.DeleteCastMemberCalls())
func (mock *BangumiServiceMock) DeleteCastMemberCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockDeleteCastMember.RLock()
	calls = mock.calls.DeleteCastMember
	mock.lockDeleteCastMember.RUnlock()
	return calls
}

// DeleteEpisode calls DeleteEpisodeFunc.
func (mock *BangumiServiceMock) DeleteEpisode(id int) error {
	if mock.DeleteEpisodeFunc == nil {
		panic("BangumiServiceMock.DeleteEpisodeFunc: method is nil but BangumiService.DeleteEpisode was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockDeleteEpisode.Lock()
	mock.calls.DeleteEpisode = append(mock.calls.DeleteEpisode, callInfo)
	mock.lockDeleteEpisode.Unlock()
	return mock.DeleteEpisodeFunc(id)
}

// DeleteEpisodeCalls gets all the calls that were made to DeleteEpisode.
// Check the length with:
//
//	len(mockedBangumiService.DeleteEpisodeCalls())
func (mock *BangumiServiceMock) DeleteEpisodeCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockDeleteEpisode.RLock()
	calls = mock.calls.DeleteEpisode
	mock.lockDeleteEpisode.RUnlock()
	return calls
}

// DeleteSeason calls DeleteSeasonFunc.
func (mock *BangumiServiceMock) DeleteSeason(id int) error {
	if mock.DeleteSeasonFunc == nil {
		panic("BangumiServiceMock.DeleteSeasonFunc: method is nil but BangumiService.DeleteSeason was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockDeleteSeason.Lock()
	mock.calls.DeleteSeason = append(mock.calls.DeleteSeason, callInfo)
	mock.lockDeleteSeason.Unlock()
	return mock.DeleteSeasonFunc(id)
}

// DeleteSeasonCalls gets all the calls that were made to DeleteSeason.
// Check the length with:
//
//	len(mockedBangumiService.DeleteSeasonCalls())
func (mock *BangumiServiceMock) DeleteSeasonCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockDeleteSeason.RLock()
	calls = mock.calls.DeleteSeason
	mock.lockDeleteSeason.RUnlock()
	return calls
}

// GetBangumi calls GetBangumiFunc.
func (mock *BangumiServiceMock) GetBangumi(id int) (*entModel.Bangumi, error) {
	if mock.GetBangumiFunc == nil {
		panic("BangumiServiceMock.GetBangumiFunc: method is nil but BangumiService.GetBangumi was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetBangumi.Lock()
	mock.calls.GetBangumi = append(mock.calls.GetBangumi, callInfo)
	mock.lockGetBangumi.Unlock()
	return mock.GetBangumiFunc(id)
}

// GetBangumiCalls gets all the calls that were made to GetBangumi.
// Check the length with:
//
//	len(mockedBangumiService.GetBangumiCalls())
func (mock *BangumiServiceMock) GetBangumiCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetBangumi.RLock()
	calls = mock.calls.GetBangumi
	mock.lockGetBangumi.RUnlock()
	return calls
}

// GetCastMember calls GetCastMemberFunc.
func (mock *BangumiServiceMock) GetCastMember(id int) (*entModel.CastMember, error) {
	if mock.GetCastMemberFunc == nil {
		panic("BangumiServiceMock.GetCastMemberFunc: method is nil but BangumiService.GetCastMember was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetCastMember.Lock()
	mock.calls.GetCastMember = append(mock.calls.GetCastMember, callInfo)
	mock.lockGetCastMember.Unlock()
	return mock.GetCastMemberFunc(id)
}

// GetCastMemberCalls gets all the calls that were made to GetCastMember.
// Check the length with:
//
//	len(mockedBangumiService.GetCastMemberCalls())
func (mock *BangumiServiceMock) GetCastMemberCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetCastMember.RLock()
	calls = mock.calls.GetCastMember
	mock.lockGetCastMember.RUnlock()
	return calls
}

// GetEpisode calls GetEpisodeFunc.
func (mock *BangumiServiceMock) GetEpisode(id int) (*entModel.Episode, error) {
	if mock.GetEpisodeFunc == nil {
		panic("BangumiServiceMock.GetEpisodeFunc: method is nil but BangumiService.GetEpisode was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetEpisode.Lock()
	mock.calls.GetEpisode = append(mock.calls.GetEpisode, callInfo)
	mock.lockGetEpisode.Unlock()
	return mock.GetEpisodeFunc(id)
}

// GetEpisodeCalls gets all the calls that were made to GetEpisode.
// Check the length with:
//
//	len(mockedBangumiService.GetEpisodeCalls())
func (mock *BangumiServiceMock) GetEpisodeCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetEpisode.RLock()
	calls = mock.calls.GetEpisode
	mock.lockGetEpisode.RUnlock()
	return calls
}

// GetSeason calls GetSeasonFunc.
func (mock *BangumiServiceMock) GetSeason(id int) (*entModel.Season, error) {
	if mock.GetSeasonFunc == nil {
		panic("BangumiServiceMock.GetSeasonFunc: method is nil but BangumiService.GetSeason was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetSeason.Lock()
	mock.calls.GetSeason = append(mock.calls.GetSeason, callInfo)
	mock.lockGetSeason.Unlock()
	return mock.GetSeasonFunc(id)
}

// GetSeasonCalls gets all the calls that were made to GetSeason.
// Check the length with:
//
//	len(mockedBangumiService.GetSeasonCalls())
func (mock *BangumiServiceMock) GetSeasonCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetSeason.RLock()
	calls = mock.calls.GetSeason
	mock.lockGetSeason.RUnlock()
	return calls
}

// ListBangumis calls ListBangumisFunc.
func (mock *BangumiServiceMock) ListBangumis(page int, pageSize int) ([]*entModel.Bangumi, error) {
	if mock.ListBangumisFunc == nil {
		panic("BangumiServiceMock.ListBangumisFunc: method is nil but BangumiService.ListBangumis was just called")
	}
	callInfo := struct {
		Page     int
		PageSize int
	}{
		Page:     page,
		PageSize: pageSize,
	}
	mock.lockListBangumis.Lock()
	mock.calls.ListBangumis = append(mock.calls.ListBangumis, callInfo)
	mock.lockListBangumis.Unlock()
	return mock.ListBangumisFunc(page, pageSize)
}

// ListBangumisCalls gets all the calls that were made to ListBangumis.
// Check the length with:
//
//	len(mockedBangumiService.ListBangumisCalls())
func (mock *BangumiServiceMock) ListBangumisCalls() []struct {
	Page     int
	PageSize int
} {
	var calls []struct {
		Page     int
		PageSize int
	}
	mock.lockListBangumis.RLock()
	calls = mock.calls.ListBangumis
	mock.lockListBangumis.RUnlock()
	return calls
}

// ListCastMembers calls ListCastMembersFunc.
func (mock *BangumiServiceMock) ListCastMembers(seasonID int) ([]*entModel.CastMember, error) {
	if mock.ListCastMembersFunc == nil {
		panic("BangumiServiceMock.ListCastMembersFunc: method is nil but BangumiService.ListCastMembers was just called")
	}
	callInfo := struct {
		SeasonID int
	}{
		SeasonID: seasonID,
	}
	mock.lockListCastMembers.Lock()
	mock.calls.ListCastMembers = append(mock.calls.ListCastMembers, callInfo)
	mock.lockListCastMembers.Unlock()
	return mock.ListCastMembersFunc(seasonID)
}

// ListCastMembersCalls gets all the calls that were made to ListCastMembers.
// Check the length with:
//
//	len(mockedBangumiService.ListCastMembersCalls())
func (mock *BangumiServiceMock) ListCastMembersCalls() []struct {
	SeasonID int
} {
	var calls []struct {
		SeasonID int
	}
	mock.lockListCastMembers.RLock()
	calls = mock.calls.ListCastMembers
	mock.lockListCastMembers.RUnlock()
	return calls
}

// ListEpisodes calls ListEpisodesFunc.
func (mock *BangumiServiceMock) ListEpisodes(seasonID int) ([]*entModel.Episode, error) {
	if mock.ListEpisodesFunc == nil {
		panic("BangumiServiceMock.ListEpisodesFunc: method is nil but BangumiService.ListEpisodes was just called")
	}
	callInfo := struct {
		SeasonID int
	}{
		SeasonID: seasonID,
	}
	mock.lockListEpisodes.Lock()
	mock.calls.ListEpisodes = append(mock.calls.ListEpisodes, callInfo)
	mock.lockListEpisodes.Unlock()
	return mock.ListEpisodesFunc(seasonID)
}

// ListEpisodesCalls gets all the calls that were made to ListEpisodes.
// Check the length with:
//
//	len(mockedBangumiService.ListEpisodesCalls())
func (mock *BangumiServiceMock) ListEpisodesCalls() []struct {
	SeasonID int
} {
	var calls []struct {
		SeasonID int
	}
	mock.lockListEpisodes.RLock()
	calls = mock.calls.ListEpisodes
	mock.lockListEpisodes.RUnlock()
	return calls
}

// ListSeasons calls ListSeasonsFunc.
func (mock *BangumiServiceMock) ListSeasons(bangumiID int) ([]*entModel.Season, error) {
	if mock.ListSeasonsFunc == nil {
		panic("BangumiServiceMock.ListSeasonsFunc: method is nil but BangumiService.ListSeasons was just called")
	}
	callInfo := struct {
		BangumiID int
	}{
		BangumiID: bangumiID,
	}
	mock.lockListSeasons.Lock()
	mock.calls.ListSeasons = append(mock.calls.ListSeasons, callInfo)
	mock.lockListSeasons.Unlock()
	return mock.ListSeasonsFunc(bangumiID)
}

// ListSeasonsCalls gets all the calls that were made to ListSeasons.
// Check the length with:
//
//	len(mockedBangumiService.ListSeasonsCalls())
func (mock *BangumiServiceMock) ListSeasonsCalls() []struct {
	BangumiID int
} {
	var calls []struct {
		BangumiID int
	}
	mock.lockListSeasons.RLock()
	calls = mock.calls.ListSeasons
	mock.lockListSeasons.RUnlock()
	return calls
}

// ScrapeAndUpdateBangumi calls ScrapeAndUpdateBangumiFunc.
func (mock *BangumiServiceMock) ScrapeAndUpdateBangumi(id int) error {
	if mock.ScrapeAndUpdateBangumiFunc == nil {
		panic("BangumiServiceMock.ScrapeAndUpdateBangumiFunc: method is nil but BangumiService.ScrapeAndUpdateBangumi was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockScrapeAndUpdateBangumi.Lock()
	mock.calls.ScrapeAndUpdateBangumi = append(mock.calls.ScrapeAndUpdateBangumi, callInfo)
	mock.lockScrapeAndUpdateBangumi.Unlock()
	return mock.ScrapeAndUpdateBangumiFunc(id)
}

// ScrapeAndUpdateBangumiCalls gets all the calls that were made to ScrapeAndUpdateBangumi.
// Check the length with:
//
//	len(mockedBangumiService.ScrapeAndUpdateBangumiCalls())
func (mock *BangumiServiceMock) ScrapeAndUpdateBangumiCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockScrapeAndUpdateBangumi.RLock()
	calls = mock.calls.ScrapeAndUpdateBangumi
	mock.lockScrapeAndUpdateBangumi.RUnlock()
	return calls
}

// ScrapeAndUpdateEpisode calls ScrapeAndUpdateEpisodeFunc.
func (mock *BangumiServiceMock) ScrapeAndUpdateEpisode(seasonID int, episodeID int) error {
	if mock.ScrapeAndUpdateEpisodeFunc == nil {
		panic("BangumiServiceMock.ScrapeAndUpdateEpisodeFunc: method is nil but BangumiService.ScrapeAndUpdateEpisode was just called")
	}
	callInfo := struct {
		SeasonID  int
		EpisodeID int
	}{
		SeasonID:  seasonID,
		EpisodeID: episodeID,
	}
	mock.lockScrapeAndUpdateEpisode.Lock()
	mock.calls.ScrapeAndUpdateEpisode = append(mock.calls.ScrapeAndUpdateEpisode, callInfo)
	mock.lockScrapeAndUpdateEpisode.Unlock()
	return mock.ScrapeAndUpdateEpisodeFunc(seasonID, episodeID)
}

// ScrapeAndUpdateEpisodeCalls gets all the calls that were made to ScrapeAndUpdateEpisode.
// Check the length with:
//
//	len(mockedBangumiService.ScrapeAndUpdateEpisodeCalls())
func (mock *BangumiServiceMock) ScrapeAndUpdateEpisodeCalls() []struct {
	SeasonID  int
	EpisodeID int
} {
	var calls []struct {
		SeasonID  int
		EpisodeID int
	}
	mock.lockScrapeAndUpdateEpisode.RLock()
	calls = mock.calls.ScrapeAndUpdateEpisode
	mock.lockScrapeAndUpdateEpisode.RUnlock()
	return calls
}

// ScrapeAndUpdateSeason calls ScrapeAndUpdateSeasonFunc.
func (mock *BangumiServiceMock) ScrapeAndUpdateSeason(bangumiID int, seasonID int) error {
	if mock.ScrapeAndUpdateSeasonFunc == nil {
		panic("BangumiServiceMock.ScrapeAndUpdateSeasonFunc: method is nil but BangumiService.ScrapeAndUpdateSeason was just called")
	}
	callInfo := struct {
		BangumiID int
		SeasonID  int
	}{
		BangumiID: bangumiID,
		SeasonID:  seasonID,
	}
	mock.lockScrapeAndUpdateSeason.Lock()
	mock.calls.ScrapeAndUpdateSeason = append(mock.calls.ScrapeAndUpdateSeason, callInfo)
	mock.lockScrapeAndUpdateSeason.Unlock()
	return mock.ScrapeAndUpdateSeasonFunc(bangumiID, seasonID)
}

// ScrapeAndUpdateSeasonCalls gets all the calls that were made to ScrapeAndUpdateSeason.
// Check the length with:
//
//	len(mockedBangumiService.ScrapeAndUpdateSeasonCalls())
func (mock *BangumiServiceMock) ScrapeAndUpdateSeasonCalls() []struct {
	BangumiID int
	SeasonID  int
} {
	var calls []struct {
		BangumiID int
		SeasonID  int
	}
	mock.lockScrapeAndUpdateSeason.RLock()
	calls = mock.calls.ScrapeAndUpdateSeason
	mock.lockScrapeAndUpdateSeason.RUnlock()
	return calls
}

// SearchBangumis calls SearchBangumisFunc.
func (mock *BangumiServiceMock) SearchBangumis(query string) ([]*entModel.Bangumi, error) {
	if mock.SearchBangumisFunc == nil {
		panic("BangumiServiceMock.SearchBangumisFunc: method is nil but BangumiService.SearchBangumis was just called")
	}
	callInfo := struct {
		Query string
	}{
		Query: query,
	}
	mock.lockSearchBangumis.Lock()
	mock.calls.SearchBangumis = append(mock.calls.SearchBangumis, callInfo)
	mock.lockSearchBangumis.Unlock()
	return mock.SearchBangumisFunc(query)
}

// SearchBangumisCalls gets all the calls that were made to SearchBangumis.
// Check the length with:
//
//	len(mockedBangumiService.SearchBangumisCalls())
func (mock *BangumiServiceMock) SearchBangumisCalls() []struct {
	Query string
} {
	var calls []struct {
		Query string
	}
	mock.lockSearchBangumis.RLock()
	calls = mock.calls.SearchBangumis
	mock.lockSearchBangumis.RUnlock()
	return calls
}

// UpdateBangumi calls UpdateBangumiFunc.
func (mock *BangumiServiceMock) UpdateBangumi(id int, bangumi *entModel.Bangumi) error {
	if mock.UpdateBangumiFunc == nil {
		panic("BangumiServiceMock.UpdateBangumiFunc: method is nil but BangumiService.UpdateBangumi was just called")
	}
	callInfo := struct {
		ID      int
		Bangumi *entModel.Bangumi
	}{
		ID:      id,
		Bangumi: bangumi,
	}
	mock.lockUpdateBangumi.Lock()
	mock.calls.UpdateBangumi = append(mock.calls.UpdateBangumi, callInfo)
	mock.lockUpdateBangumi.Unlock()
	return mock.UpdateBangumiFunc(id, bangumi)
}

// UpdateBangumiCalls gets all the calls that were made to UpdateBangumi.
// Check the length with:
//
//	len(mockedBangumiService.UpdateBangumiCalls())
func (mock *BangumiServiceMock) UpdateBangumiCalls() []struct {
	ID      int
	Bangumi *entModel.Bangumi
} {
	var calls []struct {
		ID      int
		Bangumi *entModel.Bangumi
	}
	mock.lockUpdateBangumi.RLock()
	calls = mock.calls.UpdateBangumi
	mock.lockUpdateBangumi.RUnlock()
	return calls
}

// UpdateCastMember calls UpdateCastMemberFunc.
func (mock *BangumiServiceMock) UpdateCastMember(id int, castMember *entModel.CastMember) error {
	if mock.UpdateCastMemberFunc == nil {
		panic("BangumiServiceMock.UpdateCastMemberFunc: method is nil but BangumiService.UpdateCastMember was just called")
	}
	callInfo := struct {
		ID         int
		CastMember *entModel.CastMember
	}{
		ID:         id,
		CastMember: castMember,
	}
	mock.lockUpdateCastMember.Lock()
	mock.calls.UpdateCastMember = append(mock.calls.UpdateCastMember, callInfo)
	mock.lockUpdateCastMember.Unlock()
	return mock.UpdateCastMemberFunc(id, castMember)
}

// UpdateCastMemberCalls gets all the calls that were made to UpdateCastMember.
// Check the length with:
//
//	len(mockedBangumiService.UpdateCastMemberCalls())
func (mock *BangumiServiceMock) UpdateCastMemberCalls() []struct {
	ID         int
	CastMember *entModel.CastMember
} {
	var calls []struct {
		ID         int
		CastMember *entModel.CastMember
	}
	mock.lockUpdateCastMember.RLock()
	calls = mock.calls.UpdateCastMember
	mock.lockUpdateCastMember.RUnlock()
	return calls
}

// UpdateEpisode calls UpdateEpisodeFunc.
func (mock *BangumiServiceMock) UpdateEpisode(id int, episode *entModel.Episode) error {
	if mock.UpdateEpisodeFunc == nil {
		panic("BangumiServiceMock.UpdateEpisodeFunc: method is nil but BangumiService.UpdateEpisode was just called")
	}
	callInfo := struct {
		ID      int
		Episode *entModel.Episode
	}{
		ID:      id,
		Episode: episode,
	}
	mock.lockUpdateEpisode.Lock()
	mock.calls.UpdateEpisode = append(mock.calls.UpdateEpisode, callInfo)
	mock.lockUpdateEpisode.Unlock()
	return mock.UpdateEpisodeFunc(id, episode)
}

// UpdateEpisodeCalls gets all the calls that were made to UpdateEpisode.
// Check the length with:
//
//	len(mockedBangumiService.UpdateEpisodeCalls())
func (mock *BangumiServiceMock) UpdateEpisodeCalls() []struct {
	ID      int
	Episode *entModel.Episode
} {
	var calls []struct {
		ID      int
		Episode *entModel.Episode
	}
	mock.lockUpdateEpisode.RLock()
	calls = mock.calls.UpdateEpisode
	mock.lockUpdateEpisode.RUnlock()
	return calls
}

// UpdateSeason calls UpdateSeasonFunc.
func (mock *BangumiServiceMock) UpdateSeason(id int, season *entModel.Season) error {
	if mock.UpdateSeasonFunc == nil {
		panic("BangumiServiceMock.UpdateSeasonFunc: method is nil but BangumiService.UpdateSeason was just called")
	}
	callInfo := struct {
		ID     int
		Season *entModel.Season
	}{
		ID:     id,
		Season: season,
	}
	mock.lockUpdateSeason.Lock()
	mock.calls.UpdateSeason = append(mock.calls.UpdateSeason, callInfo)
	mock.lockUpdateSeason.Unlock()
	return mock.UpdateSeasonFunc(id, season)
}

// UpdateSeasonCalls gets all the calls that were made to UpdateSeason.
// Check the length with:
//
//	len(mockedBangumiService.UpdateSeasonCalls())
func (mock *BangumiServiceMock) UpdateSeasonCalls() []struct {
	ID     int
	Season *entModel.Season
} {
	var calls []struct {
		ID     int
		Season *entModel.Season
	}
	mock.lockUpdateSeason.RLock()
	calls = mock.calls.UpdateSeason
	mock.lockUpdateSeason.RUnlock()
	return calls
}
