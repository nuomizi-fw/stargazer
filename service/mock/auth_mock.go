// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/nuomizi-fw/stargazer/service"
	"sync"
)

// Ensure, that AuthServiceMock does implement service.AuthService.
// If this is not the case, regenerate this file with moq.
var _ service.AuthService = &AuthServiceMock{}

// AuthServiceMock is a mock implementation of service.AuthService.
//
//	func TestSomethingThatUsesAuthService(t *testing.T) {
//
//		// make and configure a mocked service.AuthService
//		mockedAuthService := &AuthServiceMock{
//			ForgotPasswordFunc: func() error {
//				panic("mock out the ForgotPassword method")
//			},
//			LoginFunc: func() error {
//				panic("mock out the Login method")
//			},
//			MFAGenerateFunc: func() error {
//				panic("mock out the MFAGenerate method")
//			},
//			MFAVerifyFunc: func() error {
//				panic("mock out the MFAVerify method")
//			},
//			RegisterFunc: func() error {
//				panic("mock out the Register method")
//			},
//		}
//
//		// use mockedAuthService in code that requires service.AuthService
//		// and then make assertions.
//
//	}
type AuthServiceMock struct {
	// ForgotPasswordFunc mocks the ForgotPassword method.
	ForgotPasswordFunc func() error

	// LoginFunc mocks the Login method.
	LoginFunc func() error

	// MFAGenerateFunc mocks the MFAGenerate method.
	MFAGenerateFunc func() error

	// MFAVerifyFunc mocks the MFAVerify method.
	MFAVerifyFunc func() error

	// RegisterFunc mocks the Register method.
	RegisterFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// ForgotPassword holds details about calls to the ForgotPassword method.
		ForgotPassword []struct {
		}
		// Login holds details about calls to the Login method.
		Login []struct {
		}
		// MFAGenerate holds details about calls to the MFAGenerate method.
		MFAGenerate []struct {
		}
		// MFAVerify holds details about calls to the MFAVerify method.
		MFAVerify []struct {
		}
		// Register holds details about calls to the Register method.
		Register []struct {
		}
	}
	lockForgotPassword sync.RWMutex
	lockLogin          sync.RWMutex
	lockMFAGenerate    sync.RWMutex
	lockMFAVerify      sync.RWMutex
	lockRegister       sync.RWMutex
}

// ForgotPassword calls ForgotPasswordFunc.
func (mock *AuthServiceMock) ForgotPassword() error {
	if mock.ForgotPasswordFunc == nil {
		panic("AuthServiceMock.ForgotPasswordFunc: method is nil but AuthService.ForgotPassword was just called")
	}
	callInfo := struct {
	}{}
	mock.lockForgotPassword.Lock()
	mock.calls.ForgotPassword = append(mock.calls.ForgotPassword, callInfo)
	mock.lockForgotPassword.Unlock()
	return mock.ForgotPasswordFunc()
}

// ForgotPasswordCalls gets all the calls that were made to ForgotPassword.
// Check the length with:
//
//	len(mockedAuthService.ForgotPasswordCalls())
func (mock *AuthServiceMock) ForgotPasswordCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockForgotPassword.RLock()
	calls = mock.calls.ForgotPassword
	mock.lockForgotPassword.RUnlock()
	return calls
}

// Login calls LoginFunc.
func (mock *AuthServiceMock) Login() error {
	if mock.LoginFunc == nil {
		panic("AuthServiceMock.LoginFunc: method is nil but AuthService.Login was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc()
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedAuthService.LoginCalls())
func (mock *AuthServiceMock) LoginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}

// MFAGenerate calls MFAGenerateFunc.
func (mock *AuthServiceMock) MFAGenerate() error {
	if mock.MFAGenerateFunc == nil {
		panic("AuthServiceMock.MFAGenerateFunc: method is nil but AuthService.MFAGenerate was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMFAGenerate.Lock()
	mock.calls.MFAGenerate = append(mock.calls.MFAGenerate, callInfo)
	mock.lockMFAGenerate.Unlock()
	return mock.MFAGenerateFunc()
}

// MFAGenerateCalls gets all the calls that were made to MFAGenerate.
// Check the length with:
//
//	len(mockedAuthService.MFAGenerateCalls())
func (mock *AuthServiceMock) MFAGenerateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMFAGenerate.RLock()
	calls = mock.calls.MFAGenerate
	mock.lockMFAGenerate.RUnlock()
	return calls
}

// MFAVerify calls MFAVerifyFunc.
func (mock *AuthServiceMock) MFAVerify() error {
	if mock.MFAVerifyFunc == nil {
		panic("AuthServiceMock.MFAVerifyFunc: method is nil but AuthService.MFAVerify was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMFAVerify.Lock()
	mock.calls.MFAVerify = append(mock.calls.MFAVerify, callInfo)
	mock.lockMFAVerify.Unlock()
	return mock.MFAVerifyFunc()
}

// MFAVerifyCalls gets all the calls that were made to MFAVerify.
// Check the length with:
//
//	len(mockedAuthService.MFAVerifyCalls())
func (mock *AuthServiceMock) MFAVerifyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMFAVerify.RLock()
	calls = mock.calls.MFAVerify
	mock.lockMFAVerify.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *AuthServiceMock) Register() error {
	if mock.RegisterFunc == nil {
		panic("AuthServiceMock.RegisterFunc: method is nil but AuthService.Register was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc()
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedAuthService.RegisterCalls())
func (mock *AuthServiceMock) RegisterCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}
