// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/nuomizi-fw/stargazer/service"
	"sync"
)

// Ensure, that UserServiceMock does implement service.UserService.
// If this is not the case, regenerate this file with moq.
var _ service.UserService = &UserServiceMock{}

// UserServiceMock is a mock implementation of service.UserService.
//
//	func TestSomethingThatUsesUserService(t *testing.T) {
//
//		// make and configure a mocked service.UserService
//		mockedUserService := &UserServiceMock{
//			CreateUserFunc: func() error {
//				panic("mock out the CreateUser method")
//			},
//			DeleteUserFunc: func() error {
//				panic("mock out the DeleteUser method")
//			},
//			GetUserFunc: func() error {
//				panic("mock out the GetUser method")
//			},
//			GetUsersFunc: func() error {
//				panic("mock out the GetUsers method")
//			},
//			RefreshTokenFunc: func() error {
//				panic("mock out the RefreshToken method")
//			},
//			ResetPasswordFunc: func() error {
//				panic("mock out the ResetPassword method")
//			},
//			SetUserRoleFunc: func() error {
//				panic("mock out the SetUserRole method")
//			},
//			UpdateUserFunc: func() error {
//				panic("mock out the UpdateUser method")
//			},
//		}
//
//		// use mockedUserService in code that requires service.UserService
//		// and then make assertions.
//
//	}
type UserServiceMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func() error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func() error

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func() error

	// GetUsersFunc mocks the GetUsers method.
	GetUsersFunc func() error

	// RefreshTokenFunc mocks the RefreshToken method.
	RefreshTokenFunc func() error

	// ResetPasswordFunc mocks the ResetPassword method.
	ResetPasswordFunc func() error

	// SetUserRoleFunc mocks the SetUserRole method.
	SetUserRoleFunc func() error

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
		}
		// GetUsers holds details about calls to the GetUsers method.
		GetUsers []struct {
		}
		// RefreshToken holds details about calls to the RefreshToken method.
		RefreshToken []struct {
		}
		// ResetPassword holds details about calls to the ResetPassword method.
		ResetPassword []struct {
		}
		// SetUserRole holds details about calls to the SetUserRole method.
		SetUserRole []struct {
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
		}
	}
	lockCreateUser    sync.RWMutex
	lockDeleteUser    sync.RWMutex
	lockGetUser       sync.RWMutex
	lockGetUsers      sync.RWMutex
	lockRefreshToken  sync.RWMutex
	lockResetPassword sync.RWMutex
	lockSetUserRole   sync.RWMutex
	lockUpdateUser    sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *UserServiceMock) CreateUser() error {
	if mock.CreateUserFunc == nil {
		panic("UserServiceMock.CreateUserFunc: method is nil but UserService.CreateUser was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc()
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUserService.CreateUserCalls())
func (mock *UserServiceMock) CreateUserCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *UserServiceMock) DeleteUser() error {
	if mock.DeleteUserFunc == nil {
		panic("UserServiceMock.DeleteUserFunc: method is nil but UserService.DeleteUser was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc()
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedUserService.DeleteUserCalls())
func (mock *UserServiceMock) DeleteUserCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *UserServiceMock) GetUser() error {
	if mock.GetUserFunc == nil {
		panic("UserServiceMock.GetUserFunc: method is nil but UserService.GetUser was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc()
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedUserService.GetUserCalls())
func (mock *UserServiceMock) GetUserCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// GetUsers calls GetUsersFunc.
func (mock *UserServiceMock) GetUsers() error {
	if mock.GetUsersFunc == nil {
		panic("UserServiceMock.GetUsersFunc: method is nil but UserService.GetUsers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetUsers.Lock()
	mock.calls.GetUsers = append(mock.calls.GetUsers, callInfo)
	mock.lockGetUsers.Unlock()
	return mock.GetUsersFunc()
}

// GetUsersCalls gets all the calls that were made to GetUsers.
// Check the length with:
//
//	len(mockedUserService.GetUsersCalls())
func (mock *UserServiceMock) GetUsersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUsers.RLock()
	calls = mock.calls.GetUsers
	mock.lockGetUsers.RUnlock()
	return calls
}

// RefreshToken calls RefreshTokenFunc.
func (mock *UserServiceMock) RefreshToken() error {
	if mock.RefreshTokenFunc == nil {
		panic("UserServiceMock.RefreshTokenFunc: method is nil but UserService.RefreshToken was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRefreshToken.Lock()
	mock.calls.RefreshToken = append(mock.calls.RefreshToken, callInfo)
	mock.lockRefreshToken.Unlock()
	return mock.RefreshTokenFunc()
}

// RefreshTokenCalls gets all the calls that were made to RefreshToken.
// Check the length with:
//
//	len(mockedUserService.RefreshTokenCalls())
func (mock *UserServiceMock) RefreshTokenCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRefreshToken.RLock()
	calls = mock.calls.RefreshToken
	mock.lockRefreshToken.RUnlock()
	return calls
}

// ResetPassword calls ResetPasswordFunc.
func (mock *UserServiceMock) ResetPassword() error {
	if mock.ResetPasswordFunc == nil {
		panic("UserServiceMock.ResetPasswordFunc: method is nil but UserService.ResetPassword was just called")
	}
	callInfo := struct {
	}{}
	mock.lockResetPassword.Lock()
	mock.calls.ResetPassword = append(mock.calls.ResetPassword, callInfo)
	mock.lockResetPassword.Unlock()
	return mock.ResetPasswordFunc()
}

// ResetPasswordCalls gets all the calls that were made to ResetPassword.
// Check the length with:
//
//	len(mockedUserService.ResetPasswordCalls())
func (mock *UserServiceMock) ResetPasswordCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockResetPassword.RLock()
	calls = mock.calls.ResetPassword
	mock.lockResetPassword.RUnlock()
	return calls
}

// SetUserRole calls SetUserRoleFunc.
func (mock *UserServiceMock) SetUserRole() error {
	if mock.SetUserRoleFunc == nil {
		panic("UserServiceMock.SetUserRoleFunc: method is nil but UserService.SetUserRole was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSetUserRole.Lock()
	mock.calls.SetUserRole = append(mock.calls.SetUserRole, callInfo)
	mock.lockSetUserRole.Unlock()
	return mock.SetUserRoleFunc()
}

// SetUserRoleCalls gets all the calls that were made to SetUserRole.
// Check the length with:
//
//	len(mockedUserService.SetUserRoleCalls())
func (mock *UserServiceMock) SetUserRoleCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSetUserRole.RLock()
	calls = mock.calls.SetUserRole
	mock.lockSetUserRole.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *UserServiceMock) UpdateUser() error {
	if mock.UpdateUserFunc == nil {
		panic("UserServiceMock.UpdateUserFunc: method is nil but UserService.UpdateUser was just called")
	}
	callInfo := struct {
	}{}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc()
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//
//	len(mockedUserService.UpdateUserCalls())
func (mock *UserServiceMock) UpdateUserCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}
