openapi: 3.0.0

info:
  title: Stargazer API
  version: v1.0.0
  description: Stargazer API Reference

servers:
  - url: /api
    description: Stargazer API

security:
  - access_token: []

tags:
  # Auth: Authentication and user management
  - name: Auth
    description: User authentication, API keys, server sharing, managed users, SSO integration

  # Media: Core media management
  - name: Media
    description: Library management, media scanning, metadata agents, collections, playlists

  # Storage: Network storage management
  - name: Storage
    description: WebDAV/Samba mounts, network shares, storage pools, path management

  # Manga: Manga/Comics management
  - name: Manga
    description: Manga library, chapter tracking, reading direction, collection organization

  # Novel: Light novel and book management
  - name: Novel
    description: Ebook library, reading progress, format conversion, series organization

  # Music: Audio library management
  - name: Music
    description: Music library, artist/album organization, playlist management, lyrics

  # Scanner: Media detection and organization
  - name: Scanner
    description: Automated media detection, file monitoring, library updates, naming scheme

  # Metadata: Enhanced metadata management
  - name: Metadata
    description: TMDB/AniList/MangaDex/Audible integration, metadata editing, bulk updates

  # Streaming: Media streaming and transcoding
  - name: Streaming
    description: Direct play, transcoding profiles, subtitle handling, bandwidth management

  # Sync: Device synchronization
  - name: Sync
    description: Offline sync, progress sync across devices, watch state synchronization

  # Download: Download management
  - name: Download
    description: Download clients (QB/Aria2), queue management, automation rules

  # Notification: System notifications
  - name: Notification
    description: Push notifications, email alerts, webhook integration, activity feed

  # Settings: System configuration
  - name: Settings
    description: Server settings, library preferences, networking, storage management

  # System: Core system operations
  - name: System
    description: Server maintenance, backups, updates, performance monitoring

  # Search: Advanced search capabilities
  - name: Search
    description: Full-text search, fuzzy matching, advanced filters, recommendations

  # Sharing: Content sharing
  - name: Sharing
    description: User invites, library sharing, access controls, shared playlists

  # Analytics: Usage statistics
  - name: Analytics
    description: Media statistics, user activity, library insights, watch time tracking

  # User: User management
  - name: User
    description: User management, permissions, roles, user profiles

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: User Registration
      description: Register a new user account
      operationId: register
      requestBody:
        $ref: "#/components/requestBodies/RegisterRequest"
      responses:
        "200":
          $ref: "#/components/responses/GetRegisterResponseOK"
        "400":
          $ref: "#/components/responses/ResponseBadRequest"
        "409":
          $ref: "#/components/responses/ResponseConflictError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /auth/login:
    post:
      tags: [Auth]
      summary: User Login
      description: Authenticate user and get access token
      operationId: login
      requestBody:
        $ref: "#/components/requestBodies/LoginRequest"
      responses:
        "200":
          $ref: "#/components/responses/GetLoginResponseOK"
        "400":
          $ref: "#/components/responses/ResponseBadRequest"
        "401":
          $ref: "#/components/responses/ResponseUnauthorized"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh Access Token
      description: Refresh access token
      operationId: refresh
      requestBody:
        $ref: "#/components/requestBodies/RefreshTokenRequest"
      security:
        - refresh_token: []
      responses:
        "200":
          $ref: "#/components/responses/PostRefreshTokenResponseOK"
        "401":
          $ref: "#/components/responses/ResponseUnauthorized"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

  /user/profile:
    get:
      tags: [User]
      summary: Get User Profile
      description: Get current user's profile information
      operationId: getUserProfile
      security:
        - access_token: []
      responses:
        "200":
          $ref: "#/components/responses/GetUserProfileResponseOK"
        "401":
          $ref: "#/components/responses/ResponseUnauthorized"
        "404":
          $ref: "#/components/responses/ResponseNotFoundError"
        "500":
          $ref: "#/components/responses/ResponseInternalServerError"

components:
  securitySchemes:
    access_token:
      type: apiKey
      in: header
      name: Authorization
      description: JWT access token obtained from login

    refresh_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT refresh token for obtaining new access tokens
    api_key:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service-to-service authentication

  requestBodies:
    LoginRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - username
              - password
              - client_type
            properties:
              username:
                type: string
                example: "user123"
              password:
                type: string
                example: "Password123!"
              client_type:
                $ref: "#/components/schemas/ClientType"

    RegisterRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - username
              - password
              - email
            properties:
              username:
                type: string
                example: "user123"
              password:
                type: string
                example: "Password123!"
              email:
                type: string
                format: email
                example: "user@example.com"

    RefreshTokenRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - refresh_token
            properties:
              refresh_token:
                type: string

  responses:
    ResponseOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    ResponseStringOK:
      description: String response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseString"

    ResponseNumberOK:
      description: Number response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseNumber"

    ResponseIntegerOK:
      description: Integer response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseInteger"

    ResponseBooleanOK:
      description: Boolean response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseBoolean"

    ResponseInterfaceOK:
      description: Interface response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseInterface"

    ResponseArrayOK:
      description: Array response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SuccessResponseArray"

    # Error Responses
    ResponseBadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    ResponseUnauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    ResponseNotFoundError:
      description: Not Found Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    ResponseConflictError:
      description: Conflict Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    ResponseForbiddenError:
      description: Forbidden Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    ResponseInternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseResponse"

    GetLoginResponseOK:
      description: Login successful
      content:
        application/json:
          schema:
            type: object
            required:
              - token
            properties:
              token:
                $ref: "#/components/schemas/Token"

    GetRegisterResponseOK:
      description: Registration successful
      content:
        application/json:
          schema:
            type: object
            required:
              - user
            properties:
              user:
                $ref: "#/components/schemas/User"

    PostRefreshTokenResponseOK:
      description: Refresh token successful
      content:
        application/json:
          schema:
            type: object
            required:
              - token
            properties:
              token:
                $ref: "#/components/schemas/Token"

    GetUserProfileResponseOK:
      description: User profile retrieved successfully
      content:
        application/json:
          schema:
            type: object
            required:
              - user
            properties:
              user:
                $ref: "#/components/schemas/User"

  schemas:
    BaseResponse:
      properties:
        message:
          readOnly: true
          description: message returned by server side if there is any
          type: string
          example: ""

    SuccessResponse:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              anyOf:
                - type: string
                - type: number
                - type: integer
                - type: boolean
                - type: object
                - type: array
                  items: {}
              example: {}

    SuccessResponseString:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              type: string
              example: ""

    SuccessResponseNumber:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              type: number
              example: 0

    SuccessResponseInteger:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              type: integer
              example: 0

    SuccessResponseBoolean:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              type: boolean
              example: false

    SuccessResponseInterface:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              type: object
              example: {}

    SuccessResponseArray:
      allOf:
        - $ref: "#/components/schemas/BaseResponse"
        - properties:
            data:
              type: array
              items: {}
              example: []

    ClientType:
      type: string
      enum:
        - web
        - native
      description: Type of client making the request

    Token:
      type: object
      required:
        - access_token
        - refresh_token
        - expires_in
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIs..."
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIs..."
        expires_in:
          type: integer
          example: 3600

    User:
      type: object
      required:
        - id
        - username
        - email
        - display_name
        - avatar
        - role
        - status
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        avatar:
          type: string
          example: "https://example.com/avatar.jpg"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        role:
          type: string
          enum: [admin, user]
          example: "user"
        status:
          type: string
          enum: [active, inactive, banned]
          example: "active"
