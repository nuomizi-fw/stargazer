// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nuomizi-fw/stargazer/ent/castmember"
	"github.com/nuomizi-fw/stargazer/ent/season"
)

// CastMemberCreate is the builder for creating a CastMember entity.
type CastMemberCreate struct {
	config
	mutation *CastMemberMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cmc *CastMemberCreate) SetName(s string) *CastMemberCreate {
	cmc.mutation.SetName(s)
	return cmc
}

// SetCharacterName sets the "character_name" field.
func (cmc *CastMemberCreate) SetCharacterName(s string) *CastMemberCreate {
	cmc.mutation.SetCharacterName(s)
	return cmc
}

// SetNillableCharacterName sets the "character_name" field if the given value is not nil.
func (cmc *CastMemberCreate) SetNillableCharacterName(s *string) *CastMemberCreate {
	if s != nil {
		cmc.SetCharacterName(*s)
	}
	return cmc
}

// SetProfilePath sets the "profile_path" field.
func (cmc *CastMemberCreate) SetProfilePath(s string) *CastMemberCreate {
	cmc.mutation.SetProfilePath(s)
	return cmc
}

// SetNillableProfilePath sets the "profile_path" field if the given value is not nil.
func (cmc *CastMemberCreate) SetNillableProfilePath(s *string) *CastMemberCreate {
	if s != nil {
		cmc.SetProfilePath(*s)
	}
	return cmc
}

// SetSeasonID sets the "season_id" field.
func (cmc *CastMemberCreate) SetSeasonID(i int) *CastMemberCreate {
	cmc.mutation.SetSeasonID(i)
	return cmc
}

// SetNillableSeasonID sets the "season_id" field if the given value is not nil.
func (cmc *CastMemberCreate) SetNillableSeasonID(i *int) *CastMemberCreate {
	if i != nil {
		cmc.SetSeasonID(*i)
	}
	return cmc
}

// SetID sets the "id" field.
func (cmc *CastMemberCreate) SetID(i int) *CastMemberCreate {
	cmc.mutation.SetID(i)
	return cmc
}

// SetSeason sets the "season" edge to the Season entity.
func (cmc *CastMemberCreate) SetSeason(s *Season) *CastMemberCreate {
	return cmc.SetSeasonID(s.ID)
}

// Mutation returns the CastMemberMutation object of the builder.
func (cmc *CastMemberCreate) Mutation() *CastMemberMutation {
	return cmc.mutation
}

// Save creates the CastMember in the database.
func (cmc *CastMemberCreate) Save(ctx context.Context) (*CastMember, error) {
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CastMemberCreate) SaveX(ctx context.Context) *CastMember {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *CastMemberCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *CastMemberCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CastMemberCreate) check() error {
	if _, ok := cmc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CastMember.name"`)}
	}
	if v, ok := cmc.mutation.Name(); ok {
		if err := castmember.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CastMember.name": %w`, err)}
		}
	}
	if v, ok := cmc.mutation.SeasonID(); ok {
		if err := castmember.SeasonIDValidator(v); err != nil {
			return &ValidationError{Name: "season_id", err: fmt.Errorf(`ent: validator failed for field "CastMember.season_id": %w`, err)}
		}
	}
	if v, ok := cmc.mutation.ID(); ok {
		if err := castmember.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "CastMember.id": %w`, err)}
		}
	}
	return nil
}

func (cmc *CastMemberCreate) sqlSave(ctx context.Context) (*CastMember, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *CastMemberCreate) createSpec() (*CastMember, *sqlgraph.CreateSpec) {
	var (
		_node = &CastMember{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(castmember.Table, sqlgraph.NewFieldSpec(castmember.FieldID, field.TypeInt))
	)
	if id, ok := cmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cmc.mutation.Name(); ok {
		_spec.SetField(castmember.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cmc.mutation.CharacterName(); ok {
		_spec.SetField(castmember.FieldCharacterName, field.TypeString, value)
		_node.CharacterName = value
	}
	if value, ok := cmc.mutation.ProfilePath(); ok {
		_spec.SetField(castmember.FieldProfilePath, field.TypeString, value)
		_node.ProfilePath = value
	}
	if nodes := cmc.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   castmember.SeasonTable,
			Columns: []string{castmember.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SeasonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CastMemberCreateBulk is the builder for creating many CastMember entities in bulk.
type CastMemberCreateBulk struct {
	config
	err      error
	builders []*CastMemberCreate
}

// Save creates the CastMember entities in the database.
func (cmcb *CastMemberCreateBulk) Save(ctx context.Context) ([]*CastMember, error) {
	if cmcb.err != nil {
		return nil, cmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CastMember, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CastMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *CastMemberCreateBulk) SaveX(ctx context.Context) []*CastMember {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *CastMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *CastMemberCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
