// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nuomizi-fw/stargazer/ent/bangumi"
	"github.com/nuomizi-fw/stargazer/ent/castmember"
	"github.com/nuomizi-fw/stargazer/ent/season"
)

// BangumiCreate is the builder for creating a Bangumi entity.
type BangumiCreate struct {
	config
	mutation *BangumiMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (bc *BangumiCreate) SetTitle(s string) *BangumiCreate {
	bc.mutation.SetTitle(s)
	return bc
}

// SetEnglishTitle sets the "english_title" field.
func (bc *BangumiCreate) SetEnglishTitle(s string) *BangumiCreate {
	bc.mutation.SetEnglishTitle(s)
	return bc
}

// SetNillableEnglishTitle sets the "english_title" field if the given value is not nil.
func (bc *BangumiCreate) SetNillableEnglishTitle(s *string) *BangumiCreate {
	if s != nil {
		bc.SetEnglishTitle(*s)
	}
	return bc
}

// SetJapaneseTitle sets the "japanese_title" field.
func (bc *BangumiCreate) SetJapaneseTitle(s string) *BangumiCreate {
	bc.mutation.SetJapaneseTitle(s)
	return bc
}

// SetNillableJapaneseTitle sets the "japanese_title" field if the given value is not nil.
func (bc *BangumiCreate) SetNillableJapaneseTitle(s *string) *BangumiCreate {
	if s != nil {
		bc.SetJapaneseTitle(*s)
	}
	return bc
}

// SetType sets the "type" field.
func (bc *BangumiCreate) SetType(s string) *BangumiCreate {
	bc.mutation.SetType(s)
	return bc
}

// SetStatus sets the "status" field.
func (bc *BangumiCreate) SetStatus(s string) *BangumiCreate {
	bc.mutation.SetStatus(s)
	return bc
}

// SetScore sets the "score" field.
func (bc *BangumiCreate) SetScore(f float64) *BangumiCreate {
	bc.mutation.SetScore(f)
	return bc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (bc *BangumiCreate) SetNillableScore(f *float64) *BangumiCreate {
	if f != nil {
		bc.SetScore(*f)
	}
	return bc
}

// SetTags sets the "tags" field.
func (bc *BangumiCreate) SetTags(s string) *BangumiCreate {
	bc.mutation.SetTags(s)
	return bc
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (bc *BangumiCreate) SetNillableTags(s *string) *BangumiCreate {
	if s != nil {
		bc.SetTags(*s)
	}
	return bc
}

// SetSynopsis sets the "synopsis" field.
func (bc *BangumiCreate) SetSynopsis(s string) *BangumiCreate {
	bc.mutation.SetSynopsis(s)
	return bc
}

// SetNillableSynopsis sets the "synopsis" field if the given value is not nil.
func (bc *BangumiCreate) SetNillableSynopsis(s *string) *BangumiCreate {
	if s != nil {
		bc.SetSynopsis(*s)
	}
	return bc
}

// SetCoverImage sets the "cover_image" field.
func (bc *BangumiCreate) SetCoverImage(s string) *BangumiCreate {
	bc.mutation.SetCoverImage(s)
	return bc
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (bc *BangumiCreate) SetNillableCoverImage(s *string) *BangumiCreate {
	if s != nil {
		bc.SetCoverImage(*s)
	}
	return bc
}

// SetTrailerURL sets the "trailer_url" field.
func (bc *BangumiCreate) SetTrailerURL(s string) *BangumiCreate {
	bc.mutation.SetTrailerURL(s)
	return bc
}

// SetNillableTrailerURL sets the "trailer_url" field if the given value is not nil.
func (bc *BangumiCreate) SetNillableTrailerURL(s *string) *BangumiCreate {
	if s != nil {
		bc.SetTrailerURL(*s)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BangumiCreate) SetID(i int) *BangumiCreate {
	bc.mutation.SetID(i)
	return bc
}

// AddSeasonIDs adds the "seasons" edge to the Season entity by IDs.
func (bc *BangumiCreate) AddSeasonIDs(ids ...int) *BangumiCreate {
	bc.mutation.AddSeasonIDs(ids...)
	return bc
}

// AddSeasons adds the "seasons" edges to the Season entity.
func (bc *BangumiCreate) AddSeasons(s ...*Season) *BangumiCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bc.AddSeasonIDs(ids...)
}

// AddCastMemberIDs adds the "cast_members" edge to the CastMember entity by IDs.
func (bc *BangumiCreate) AddCastMemberIDs(ids ...int) *BangumiCreate {
	bc.mutation.AddCastMemberIDs(ids...)
	return bc
}

// AddCastMembers adds the "cast_members" edges to the CastMember entity.
func (bc *BangumiCreate) AddCastMembers(c ...*CastMember) *BangumiCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bc.AddCastMemberIDs(ids...)
}

// Mutation returns the BangumiMutation object of the builder.
func (bc *BangumiCreate) Mutation() *BangumiMutation {
	return bc.mutation
}

// Save creates the Bangumi in the database.
func (bc *BangumiCreate) Save(ctx context.Context) (*Bangumi, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BangumiCreate) SaveX(ctx context.Context) *Bangumi {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BangumiCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BangumiCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BangumiCreate) check() error {
	if _, ok := bc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Bangumi.title"`)}
	}
	if v, ok := bc.mutation.Title(); ok {
		if err := bangumi.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Bangumi.title": %w`, err)}
		}
	}
	if _, ok := bc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Bangumi.type"`)}
	}
	if v, ok := bc.mutation.GetType(); ok {
		if err := bangumi.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Bangumi.type": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Bangumi.status"`)}
	}
	if v, ok := bc.mutation.Status(); ok {
		if err := bangumi.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bangumi.status": %w`, err)}
		}
	}
	if v, ok := bc.mutation.ID(); ok {
		if err := bangumi.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Bangumi.id": %w`, err)}
		}
	}
	return nil
}

func (bc *BangumiCreate) sqlSave(ctx context.Context) (*Bangumi, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BangumiCreate) createSpec() (*Bangumi, *sqlgraph.CreateSpec) {
	var (
		_node = &Bangumi{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bangumi.Table, sqlgraph.NewFieldSpec(bangumi.FieldID, field.TypeInt))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Title(); ok {
		_spec.SetField(bangumi.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bc.mutation.EnglishTitle(); ok {
		_spec.SetField(bangumi.FieldEnglishTitle, field.TypeString, value)
		_node.EnglishTitle = value
	}
	if value, ok := bc.mutation.JapaneseTitle(); ok {
		_spec.SetField(bangumi.FieldJapaneseTitle, field.TypeString, value)
		_node.JapaneseTitle = value
	}
	if value, ok := bc.mutation.GetType(); ok {
		_spec.SetField(bangumi.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(bangumi.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.Score(); ok {
		_spec.SetField(bangumi.FieldScore, field.TypeFloat64, value)
		_node.Score = value
	}
	if value, ok := bc.mutation.Tags(); ok {
		_spec.SetField(bangumi.FieldTags, field.TypeString, value)
		_node.Tags = value
	}
	if value, ok := bc.mutation.Synopsis(); ok {
		_spec.SetField(bangumi.FieldSynopsis, field.TypeString, value)
		_node.Synopsis = value
	}
	if value, ok := bc.mutation.CoverImage(); ok {
		_spec.SetField(bangumi.FieldCoverImage, field.TypeString, value)
		_node.CoverImage = value
	}
	if value, ok := bc.mutation.TrailerURL(); ok {
		_spec.SetField(bangumi.FieldTrailerURL, field.TypeString, value)
		_node.TrailerURL = value
	}
	if nodes := bc.mutation.SeasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.SeasonsTable,
			Columns: []string{bangumi.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CastMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.CastMembersTable,
			Columns: []string{bangumi.CastMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(castmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BangumiCreateBulk is the builder for creating many Bangumi entities in bulk.
type BangumiCreateBulk struct {
	config
	err      error
	builders []*BangumiCreate
}

// Save creates the Bangumi entities in the database.
func (bcb *BangumiCreateBulk) Save(ctx context.Context) ([]*Bangumi, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bangumi, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BangumiMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BangumiCreateBulk) SaveX(ctx context.Context) []*Bangumi {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BangumiCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BangumiCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
