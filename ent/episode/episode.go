// Code generated by ent, DO NOT EDIT.

package episode

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the episode type in the database.
	Label = "episode"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEpisodeNumber holds the string denoting the episode_number field in the database.
	FieldEpisodeNumber = "episode_number"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldOverview holds the string denoting the overview field in the database.
	FieldOverview = "overview"
	// FieldAirDate holds the string denoting the air_date field in the database.
	FieldAirDate = "air_date"
	// FieldSeasonID holds the string denoting the season_id field in the database.
	FieldSeasonID = "season_id"
	// EdgeSeason holds the string denoting the season edge name in mutations.
	EdgeSeason = "season"
	// EdgeCastMembers holds the string denoting the cast_members edge name in mutations.
	EdgeCastMembers = "cast_members"
	// Table holds the table name of the episode in the database.
	Table = "episodes"
	// SeasonTable is the table that holds the season relation/edge.
	SeasonTable = "episodes"
	// SeasonInverseTable is the table name for the Season entity.
	// It exists in this package in order to avoid circular dependency with the "season" package.
	SeasonInverseTable = "seasons"
	// SeasonColumn is the table column denoting the season relation/edge.
	SeasonColumn = "season_id"
	// CastMembersTable is the table that holds the cast_members relation/edge.
	CastMembersTable = "cast_members"
	// CastMembersInverseTable is the table name for the CastMember entity.
	// It exists in this package in order to avoid circular dependency with the "castmember" package.
	CastMembersInverseTable = "cast_members"
	// CastMembersColumn is the table column denoting the cast_members relation/edge.
	CastMembersColumn = "episode_cast_members"
)

// Columns holds all SQL columns for episode fields.
var Columns = []string{
	FieldID,
	FieldEpisodeNumber,
	FieldTitle,
	FieldOverview,
	FieldAirDate,
	FieldSeasonID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EpisodeNumberValidator is a validator for the "episode_number" field. It is called by the builders before save.
	EpisodeNumberValidator func(int) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// SeasonIDValidator is a validator for the "season_id" field. It is called by the builders before save.
	SeasonIDValidator func(int) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Episode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEpisodeNumber orders the results by the episode_number field.
func ByEpisodeNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEpisodeNumber, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByOverview orders the results by the overview field.
func ByOverview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverview, opts...).ToFunc()
}

// ByAirDate orders the results by the air_date field.
func ByAirDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAirDate, opts...).ToFunc()
}

// BySeasonID orders the results by the season_id field.
func BySeasonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeasonID, opts...).ToFunc()
}

// BySeasonField orders the results by season field.
func BySeasonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeasonStep(), sql.OrderByField(field, opts...))
	}
}

// ByCastMembersCount orders the results by cast_members count.
func ByCastMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCastMembersStep(), opts...)
	}
}

// ByCastMembers orders the results by cast_members terms.
func ByCastMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCastMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSeasonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeasonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SeasonTable, SeasonColumn),
	)
}
func newCastMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CastMembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CastMembersTable, CastMembersColumn),
	)
}
