// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nuomizi-fw/stargazer/ent/bangumi"
	"github.com/nuomizi-fw/stargazer/ent/castmember"
	"github.com/nuomizi-fw/stargazer/ent/predicate"
	"github.com/nuomizi-fw/stargazer/ent/season"
)

// BangumiUpdate is the builder for updating Bangumi entities.
type BangumiUpdate struct {
	config
	hooks    []Hook
	mutation *BangumiMutation
}

// Where appends a list predicates to the BangumiUpdate builder.
func (bu *BangumiUpdate) Where(ps ...predicate.Bangumi) *BangumiUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetTitle sets the "title" field.
func (bu *BangumiUpdate) SetTitle(s string) *BangumiUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bu *BangumiUpdate) SetNillableTitle(s *string) *BangumiUpdate {
	if s != nil {
		bu.SetTitle(*s)
	}
	return bu
}

// SetEnglishTitle sets the "english_title" field.
func (bu *BangumiUpdate) SetEnglishTitle(s string) *BangumiUpdate {
	bu.mutation.SetEnglishTitle(s)
	return bu
}

// SetNillableEnglishTitle sets the "english_title" field if the given value is not nil.
func (bu *BangumiUpdate) SetNillableEnglishTitle(s *string) *BangumiUpdate {
	if s != nil {
		bu.SetEnglishTitle(*s)
	}
	return bu
}

// ClearEnglishTitle clears the value of the "english_title" field.
func (bu *BangumiUpdate) ClearEnglishTitle() *BangumiUpdate {
	bu.mutation.ClearEnglishTitle()
	return bu
}

// SetJapaneseTitle sets the "japanese_title" field.
func (bu *BangumiUpdate) SetJapaneseTitle(s string) *BangumiUpdate {
	bu.mutation.SetJapaneseTitle(s)
	return bu
}

// SetNillableJapaneseTitle sets the "japanese_title" field if the given value is not nil.
func (bu *BangumiUpdate) SetNillableJapaneseTitle(s *string) *BangumiUpdate {
	if s != nil {
		bu.SetJapaneseTitle(*s)
	}
	return bu
}

// ClearJapaneseTitle clears the value of the "japanese_title" field.
func (bu *BangumiUpdate) ClearJapaneseTitle() *BangumiUpdate {
	bu.mutation.ClearJapaneseTitle()
	return bu
}

// SetType sets the "type" field.
func (bu *BangumiUpdate) SetType(s string) *BangumiUpdate {
	bu.mutation.SetType(s)
	return bu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bu *BangumiUpdate) SetNillableType(s *string) *BangumiUpdate {
	if s != nil {
		bu.SetType(*s)
	}
	return bu
}

// SetStatus sets the "status" field.
func (bu *BangumiUpdate) SetStatus(s string) *BangumiUpdate {
	bu.mutation.SetStatus(s)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BangumiUpdate) SetNillableStatus(s *string) *BangumiUpdate {
	if s != nil {
		bu.SetStatus(*s)
	}
	return bu
}

// SetScore sets the "score" field.
func (bu *BangumiUpdate) SetScore(f float64) *BangumiUpdate {
	bu.mutation.ResetScore()
	bu.mutation.SetScore(f)
	return bu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (bu *BangumiUpdate) SetNillableScore(f *float64) *BangumiUpdate {
	if f != nil {
		bu.SetScore(*f)
	}
	return bu
}

// AddScore adds f to the "score" field.
func (bu *BangumiUpdate) AddScore(f float64) *BangumiUpdate {
	bu.mutation.AddScore(f)
	return bu
}

// ClearScore clears the value of the "score" field.
func (bu *BangumiUpdate) ClearScore() *BangumiUpdate {
	bu.mutation.ClearScore()
	return bu
}

// SetTags sets the "tags" field.
func (bu *BangumiUpdate) SetTags(s string) *BangumiUpdate {
	bu.mutation.SetTags(s)
	return bu
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (bu *BangumiUpdate) SetNillableTags(s *string) *BangumiUpdate {
	if s != nil {
		bu.SetTags(*s)
	}
	return bu
}

// ClearTags clears the value of the "tags" field.
func (bu *BangumiUpdate) ClearTags() *BangumiUpdate {
	bu.mutation.ClearTags()
	return bu
}

// SetSynopsis sets the "synopsis" field.
func (bu *BangumiUpdate) SetSynopsis(s string) *BangumiUpdate {
	bu.mutation.SetSynopsis(s)
	return bu
}

// SetNillableSynopsis sets the "synopsis" field if the given value is not nil.
func (bu *BangumiUpdate) SetNillableSynopsis(s *string) *BangumiUpdate {
	if s != nil {
		bu.SetSynopsis(*s)
	}
	return bu
}

// ClearSynopsis clears the value of the "synopsis" field.
func (bu *BangumiUpdate) ClearSynopsis() *BangumiUpdate {
	bu.mutation.ClearSynopsis()
	return bu
}

// SetCoverImage sets the "cover_image" field.
func (bu *BangumiUpdate) SetCoverImage(s string) *BangumiUpdate {
	bu.mutation.SetCoverImage(s)
	return bu
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (bu *BangumiUpdate) SetNillableCoverImage(s *string) *BangumiUpdate {
	if s != nil {
		bu.SetCoverImage(*s)
	}
	return bu
}

// ClearCoverImage clears the value of the "cover_image" field.
func (bu *BangumiUpdate) ClearCoverImage() *BangumiUpdate {
	bu.mutation.ClearCoverImage()
	return bu
}

// SetTrailerURL sets the "trailer_url" field.
func (bu *BangumiUpdate) SetTrailerURL(s string) *BangumiUpdate {
	bu.mutation.SetTrailerURL(s)
	return bu
}

// SetNillableTrailerURL sets the "trailer_url" field if the given value is not nil.
func (bu *BangumiUpdate) SetNillableTrailerURL(s *string) *BangumiUpdate {
	if s != nil {
		bu.SetTrailerURL(*s)
	}
	return bu
}

// ClearTrailerURL clears the value of the "trailer_url" field.
func (bu *BangumiUpdate) ClearTrailerURL() *BangumiUpdate {
	bu.mutation.ClearTrailerURL()
	return bu
}

// AddSeasonIDs adds the "seasons" edge to the Season entity by IDs.
func (bu *BangumiUpdate) AddSeasonIDs(ids ...int) *BangumiUpdate {
	bu.mutation.AddSeasonIDs(ids...)
	return bu
}

// AddSeasons adds the "seasons" edges to the Season entity.
func (bu *BangumiUpdate) AddSeasons(s ...*Season) *BangumiUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.AddSeasonIDs(ids...)
}

// AddCastMemberIDs adds the "cast_members" edge to the CastMember entity by IDs.
func (bu *BangumiUpdate) AddCastMemberIDs(ids ...int) *BangumiUpdate {
	bu.mutation.AddCastMemberIDs(ids...)
	return bu
}

// AddCastMembers adds the "cast_members" edges to the CastMember entity.
func (bu *BangumiUpdate) AddCastMembers(c ...*CastMember) *BangumiUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.AddCastMemberIDs(ids...)
}

// Mutation returns the BangumiMutation object of the builder.
func (bu *BangumiUpdate) Mutation() *BangumiMutation {
	return bu.mutation
}

// ClearSeasons clears all "seasons" edges to the Season entity.
func (bu *BangumiUpdate) ClearSeasons() *BangumiUpdate {
	bu.mutation.ClearSeasons()
	return bu
}

// RemoveSeasonIDs removes the "seasons" edge to Season entities by IDs.
func (bu *BangumiUpdate) RemoveSeasonIDs(ids ...int) *BangumiUpdate {
	bu.mutation.RemoveSeasonIDs(ids...)
	return bu
}

// RemoveSeasons removes "seasons" edges to Season entities.
func (bu *BangumiUpdate) RemoveSeasons(s ...*Season) *BangumiUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.RemoveSeasonIDs(ids...)
}

// ClearCastMembers clears all "cast_members" edges to the CastMember entity.
func (bu *BangumiUpdate) ClearCastMembers() *BangumiUpdate {
	bu.mutation.ClearCastMembers()
	return bu
}

// RemoveCastMemberIDs removes the "cast_members" edge to CastMember entities by IDs.
func (bu *BangumiUpdate) RemoveCastMemberIDs(ids ...int) *BangumiUpdate {
	bu.mutation.RemoveCastMemberIDs(ids...)
	return bu
}

// RemoveCastMembers removes "cast_members" edges to CastMember entities.
func (bu *BangumiUpdate) RemoveCastMembers(c ...*CastMember) *BangumiUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.RemoveCastMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BangumiUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BangumiUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BangumiUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BangumiUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BangumiUpdate) check() error {
	if v, ok := bu.mutation.Title(); ok {
		if err := bangumi.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Bangumi.title": %w`, err)}
		}
	}
	if v, ok := bu.mutation.GetType(); ok {
		if err := bangumi.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Bangumi.type": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Status(); ok {
		if err := bangumi.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bangumi.status": %w`, err)}
		}
	}
	return nil
}

func (bu *BangumiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bangumi.Table, bangumi.Columns, sqlgraph.NewFieldSpec(bangumi.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(bangumi.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.EnglishTitle(); ok {
		_spec.SetField(bangumi.FieldEnglishTitle, field.TypeString, value)
	}
	if bu.mutation.EnglishTitleCleared() {
		_spec.ClearField(bangumi.FieldEnglishTitle, field.TypeString)
	}
	if value, ok := bu.mutation.JapaneseTitle(); ok {
		_spec.SetField(bangumi.FieldJapaneseTitle, field.TypeString, value)
	}
	if bu.mutation.JapaneseTitleCleared() {
		_spec.ClearField(bangumi.FieldJapaneseTitle, field.TypeString)
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.SetField(bangumi.FieldType, field.TypeString, value)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(bangumi.FieldStatus, field.TypeString, value)
	}
	if value, ok := bu.mutation.Score(); ok {
		_spec.SetField(bangumi.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedScore(); ok {
		_spec.AddField(bangumi.FieldScore, field.TypeFloat64, value)
	}
	if bu.mutation.ScoreCleared() {
		_spec.ClearField(bangumi.FieldScore, field.TypeFloat64)
	}
	if value, ok := bu.mutation.Tags(); ok {
		_spec.SetField(bangumi.FieldTags, field.TypeString, value)
	}
	if bu.mutation.TagsCleared() {
		_spec.ClearField(bangumi.FieldTags, field.TypeString)
	}
	if value, ok := bu.mutation.Synopsis(); ok {
		_spec.SetField(bangumi.FieldSynopsis, field.TypeString, value)
	}
	if bu.mutation.SynopsisCleared() {
		_spec.ClearField(bangumi.FieldSynopsis, field.TypeString)
	}
	if value, ok := bu.mutation.CoverImage(); ok {
		_spec.SetField(bangumi.FieldCoverImage, field.TypeString, value)
	}
	if bu.mutation.CoverImageCleared() {
		_spec.ClearField(bangumi.FieldCoverImage, field.TypeString)
	}
	if value, ok := bu.mutation.TrailerURL(); ok {
		_spec.SetField(bangumi.FieldTrailerURL, field.TypeString, value)
	}
	if bu.mutation.TrailerURLCleared() {
		_spec.ClearField(bangumi.FieldTrailerURL, field.TypeString)
	}
	if bu.mutation.SeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.SeasonsTable,
			Columns: []string{bangumi.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedSeasonsIDs(); len(nodes) > 0 && !bu.mutation.SeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.SeasonsTable,
			Columns: []string{bangumi.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.SeasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.SeasonsTable,
			Columns: []string{bangumi.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CastMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.CastMembersTable,
			Columns: []string{bangumi.CastMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(castmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedCastMembersIDs(); len(nodes) > 0 && !bu.mutation.CastMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.CastMembersTable,
			Columns: []string{bangumi.CastMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(castmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CastMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.CastMembersTable,
			Columns: []string{bangumi.CastMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(castmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bangumi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BangumiUpdateOne is the builder for updating a single Bangumi entity.
type BangumiUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BangumiMutation
}

// SetTitle sets the "title" field.
func (buo *BangumiUpdateOne) SetTitle(s string) *BangumiUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (buo *BangumiUpdateOne) SetNillableTitle(s *string) *BangumiUpdateOne {
	if s != nil {
		buo.SetTitle(*s)
	}
	return buo
}

// SetEnglishTitle sets the "english_title" field.
func (buo *BangumiUpdateOne) SetEnglishTitle(s string) *BangumiUpdateOne {
	buo.mutation.SetEnglishTitle(s)
	return buo
}

// SetNillableEnglishTitle sets the "english_title" field if the given value is not nil.
func (buo *BangumiUpdateOne) SetNillableEnglishTitle(s *string) *BangumiUpdateOne {
	if s != nil {
		buo.SetEnglishTitle(*s)
	}
	return buo
}

// ClearEnglishTitle clears the value of the "english_title" field.
func (buo *BangumiUpdateOne) ClearEnglishTitle() *BangumiUpdateOne {
	buo.mutation.ClearEnglishTitle()
	return buo
}

// SetJapaneseTitle sets the "japanese_title" field.
func (buo *BangumiUpdateOne) SetJapaneseTitle(s string) *BangumiUpdateOne {
	buo.mutation.SetJapaneseTitle(s)
	return buo
}

// SetNillableJapaneseTitle sets the "japanese_title" field if the given value is not nil.
func (buo *BangumiUpdateOne) SetNillableJapaneseTitle(s *string) *BangumiUpdateOne {
	if s != nil {
		buo.SetJapaneseTitle(*s)
	}
	return buo
}

// ClearJapaneseTitle clears the value of the "japanese_title" field.
func (buo *BangumiUpdateOne) ClearJapaneseTitle() *BangumiUpdateOne {
	buo.mutation.ClearJapaneseTitle()
	return buo
}

// SetType sets the "type" field.
func (buo *BangumiUpdateOne) SetType(s string) *BangumiUpdateOne {
	buo.mutation.SetType(s)
	return buo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (buo *BangumiUpdateOne) SetNillableType(s *string) *BangumiUpdateOne {
	if s != nil {
		buo.SetType(*s)
	}
	return buo
}

// SetStatus sets the "status" field.
func (buo *BangumiUpdateOne) SetStatus(s string) *BangumiUpdateOne {
	buo.mutation.SetStatus(s)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BangumiUpdateOne) SetNillableStatus(s *string) *BangumiUpdateOne {
	if s != nil {
		buo.SetStatus(*s)
	}
	return buo
}

// SetScore sets the "score" field.
func (buo *BangumiUpdateOne) SetScore(f float64) *BangumiUpdateOne {
	buo.mutation.ResetScore()
	buo.mutation.SetScore(f)
	return buo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (buo *BangumiUpdateOne) SetNillableScore(f *float64) *BangumiUpdateOne {
	if f != nil {
		buo.SetScore(*f)
	}
	return buo
}

// AddScore adds f to the "score" field.
func (buo *BangumiUpdateOne) AddScore(f float64) *BangumiUpdateOne {
	buo.mutation.AddScore(f)
	return buo
}

// ClearScore clears the value of the "score" field.
func (buo *BangumiUpdateOne) ClearScore() *BangumiUpdateOne {
	buo.mutation.ClearScore()
	return buo
}

// SetTags sets the "tags" field.
func (buo *BangumiUpdateOne) SetTags(s string) *BangumiUpdateOne {
	buo.mutation.SetTags(s)
	return buo
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (buo *BangumiUpdateOne) SetNillableTags(s *string) *BangumiUpdateOne {
	if s != nil {
		buo.SetTags(*s)
	}
	return buo
}

// ClearTags clears the value of the "tags" field.
func (buo *BangumiUpdateOne) ClearTags() *BangumiUpdateOne {
	buo.mutation.ClearTags()
	return buo
}

// SetSynopsis sets the "synopsis" field.
func (buo *BangumiUpdateOne) SetSynopsis(s string) *BangumiUpdateOne {
	buo.mutation.SetSynopsis(s)
	return buo
}

// SetNillableSynopsis sets the "synopsis" field if the given value is not nil.
func (buo *BangumiUpdateOne) SetNillableSynopsis(s *string) *BangumiUpdateOne {
	if s != nil {
		buo.SetSynopsis(*s)
	}
	return buo
}

// ClearSynopsis clears the value of the "synopsis" field.
func (buo *BangumiUpdateOne) ClearSynopsis() *BangumiUpdateOne {
	buo.mutation.ClearSynopsis()
	return buo
}

// SetCoverImage sets the "cover_image" field.
func (buo *BangumiUpdateOne) SetCoverImage(s string) *BangumiUpdateOne {
	buo.mutation.SetCoverImage(s)
	return buo
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (buo *BangumiUpdateOne) SetNillableCoverImage(s *string) *BangumiUpdateOne {
	if s != nil {
		buo.SetCoverImage(*s)
	}
	return buo
}

// ClearCoverImage clears the value of the "cover_image" field.
func (buo *BangumiUpdateOne) ClearCoverImage() *BangumiUpdateOne {
	buo.mutation.ClearCoverImage()
	return buo
}

// SetTrailerURL sets the "trailer_url" field.
func (buo *BangumiUpdateOne) SetTrailerURL(s string) *BangumiUpdateOne {
	buo.mutation.SetTrailerURL(s)
	return buo
}

// SetNillableTrailerURL sets the "trailer_url" field if the given value is not nil.
func (buo *BangumiUpdateOne) SetNillableTrailerURL(s *string) *BangumiUpdateOne {
	if s != nil {
		buo.SetTrailerURL(*s)
	}
	return buo
}

// ClearTrailerURL clears the value of the "trailer_url" field.
func (buo *BangumiUpdateOne) ClearTrailerURL() *BangumiUpdateOne {
	buo.mutation.ClearTrailerURL()
	return buo
}

// AddSeasonIDs adds the "seasons" edge to the Season entity by IDs.
func (buo *BangumiUpdateOne) AddSeasonIDs(ids ...int) *BangumiUpdateOne {
	buo.mutation.AddSeasonIDs(ids...)
	return buo
}

// AddSeasons adds the "seasons" edges to the Season entity.
func (buo *BangumiUpdateOne) AddSeasons(s ...*Season) *BangumiUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.AddSeasonIDs(ids...)
}

// AddCastMemberIDs adds the "cast_members" edge to the CastMember entity by IDs.
func (buo *BangumiUpdateOne) AddCastMemberIDs(ids ...int) *BangumiUpdateOne {
	buo.mutation.AddCastMemberIDs(ids...)
	return buo
}

// AddCastMembers adds the "cast_members" edges to the CastMember entity.
func (buo *BangumiUpdateOne) AddCastMembers(c ...*CastMember) *BangumiUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.AddCastMemberIDs(ids...)
}

// Mutation returns the BangumiMutation object of the builder.
func (buo *BangumiUpdateOne) Mutation() *BangumiMutation {
	return buo.mutation
}

// ClearSeasons clears all "seasons" edges to the Season entity.
func (buo *BangumiUpdateOne) ClearSeasons() *BangumiUpdateOne {
	buo.mutation.ClearSeasons()
	return buo
}

// RemoveSeasonIDs removes the "seasons" edge to Season entities by IDs.
func (buo *BangumiUpdateOne) RemoveSeasonIDs(ids ...int) *BangumiUpdateOne {
	buo.mutation.RemoveSeasonIDs(ids...)
	return buo
}

// RemoveSeasons removes "seasons" edges to Season entities.
func (buo *BangumiUpdateOne) RemoveSeasons(s ...*Season) *BangumiUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.RemoveSeasonIDs(ids...)
}

// ClearCastMembers clears all "cast_members" edges to the CastMember entity.
func (buo *BangumiUpdateOne) ClearCastMembers() *BangumiUpdateOne {
	buo.mutation.ClearCastMembers()
	return buo
}

// RemoveCastMemberIDs removes the "cast_members" edge to CastMember entities by IDs.
func (buo *BangumiUpdateOne) RemoveCastMemberIDs(ids ...int) *BangumiUpdateOne {
	buo.mutation.RemoveCastMemberIDs(ids...)
	return buo
}

// RemoveCastMembers removes "cast_members" edges to CastMember entities.
func (buo *BangumiUpdateOne) RemoveCastMembers(c ...*CastMember) *BangumiUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.RemoveCastMemberIDs(ids...)
}

// Where appends a list predicates to the BangumiUpdate builder.
func (buo *BangumiUpdateOne) Where(ps ...predicate.Bangumi) *BangumiUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BangumiUpdateOne) Select(field string, fields ...string) *BangumiUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bangumi entity.
func (buo *BangumiUpdateOne) Save(ctx context.Context) (*Bangumi, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BangumiUpdateOne) SaveX(ctx context.Context) *Bangumi {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BangumiUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BangumiUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BangumiUpdateOne) check() error {
	if v, ok := buo.mutation.Title(); ok {
		if err := bangumi.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Bangumi.title": %w`, err)}
		}
	}
	if v, ok := buo.mutation.GetType(); ok {
		if err := bangumi.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Bangumi.type": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Status(); ok {
		if err := bangumi.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bangumi.status": %w`, err)}
		}
	}
	return nil
}

func (buo *BangumiUpdateOne) sqlSave(ctx context.Context) (_node *Bangumi, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bangumi.Table, bangumi.Columns, sqlgraph.NewFieldSpec(bangumi.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bangumi.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bangumi.FieldID)
		for _, f := range fields {
			if !bangumi.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bangumi.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(bangumi.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.EnglishTitle(); ok {
		_spec.SetField(bangumi.FieldEnglishTitle, field.TypeString, value)
	}
	if buo.mutation.EnglishTitleCleared() {
		_spec.ClearField(bangumi.FieldEnglishTitle, field.TypeString)
	}
	if value, ok := buo.mutation.JapaneseTitle(); ok {
		_spec.SetField(bangumi.FieldJapaneseTitle, field.TypeString, value)
	}
	if buo.mutation.JapaneseTitleCleared() {
		_spec.ClearField(bangumi.FieldJapaneseTitle, field.TypeString)
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.SetField(bangumi.FieldType, field.TypeString, value)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(bangumi.FieldStatus, field.TypeString, value)
	}
	if value, ok := buo.mutation.Score(); ok {
		_spec.SetField(bangumi.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedScore(); ok {
		_spec.AddField(bangumi.FieldScore, field.TypeFloat64, value)
	}
	if buo.mutation.ScoreCleared() {
		_spec.ClearField(bangumi.FieldScore, field.TypeFloat64)
	}
	if value, ok := buo.mutation.Tags(); ok {
		_spec.SetField(bangumi.FieldTags, field.TypeString, value)
	}
	if buo.mutation.TagsCleared() {
		_spec.ClearField(bangumi.FieldTags, field.TypeString)
	}
	if value, ok := buo.mutation.Synopsis(); ok {
		_spec.SetField(bangumi.FieldSynopsis, field.TypeString, value)
	}
	if buo.mutation.SynopsisCleared() {
		_spec.ClearField(bangumi.FieldSynopsis, field.TypeString)
	}
	if value, ok := buo.mutation.CoverImage(); ok {
		_spec.SetField(bangumi.FieldCoverImage, field.TypeString, value)
	}
	if buo.mutation.CoverImageCleared() {
		_spec.ClearField(bangumi.FieldCoverImage, field.TypeString)
	}
	if value, ok := buo.mutation.TrailerURL(); ok {
		_spec.SetField(bangumi.FieldTrailerURL, field.TypeString, value)
	}
	if buo.mutation.TrailerURLCleared() {
		_spec.ClearField(bangumi.FieldTrailerURL, field.TypeString)
	}
	if buo.mutation.SeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.SeasonsTable,
			Columns: []string{bangumi.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedSeasonsIDs(); len(nodes) > 0 && !buo.mutation.SeasonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.SeasonsTable,
			Columns: []string{bangumi.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.SeasonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.SeasonsTable,
			Columns: []string{bangumi.SeasonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CastMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.CastMembersTable,
			Columns: []string{bangumi.CastMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(castmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedCastMembersIDs(); len(nodes) > 0 && !buo.mutation.CastMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.CastMembersTable,
			Columns: []string{bangumi.CastMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(castmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CastMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bangumi.CastMembersTable,
			Columns: []string{bangumi.CastMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(castmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bangumi{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bangumi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
