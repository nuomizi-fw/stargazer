// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nuomizi-fw/stargazer/ent/castmember"
	"github.com/nuomizi-fw/stargazer/ent/season"
)

// CastMember is the model entity for the CastMember schema.
type CastMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CharacterName holds the value of the "character_name" field.
	CharacterName string `json:"character_name,omitempty"`
	// ProfilePath holds the value of the "profile_path" field.
	ProfilePath string `json:"profile_path,omitempty"`
	// SeasonID holds the value of the "season_id" field.
	SeasonID int `json:"season_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CastMemberQuery when eager-loading is set.
	Edges                CastMemberEdges `json:"edges"`
	bangumi_cast_members *int
	episode_cast_members *int
	selectValues         sql.SelectValues
}

// CastMemberEdges holds the relations/edges for other nodes in the graph.
type CastMemberEdges struct {
	// Season holds the value of the season edge.
	Season *Season `json:"season,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SeasonOrErr returns the Season value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CastMemberEdges) SeasonOrErr() (*Season, error) {
	if e.Season != nil {
		return e.Season, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: season.Label}
	}
	return nil, &NotLoadedError{edge: "season"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CastMember) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case castmember.FieldID, castmember.FieldSeasonID:
			values[i] = new(sql.NullInt64)
		case castmember.FieldName, castmember.FieldCharacterName, castmember.FieldProfilePath:
			values[i] = new(sql.NullString)
		case castmember.ForeignKeys[0]: // bangumi_cast_members
			values[i] = new(sql.NullInt64)
		case castmember.ForeignKeys[1]: // episode_cast_members
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CastMember fields.
func (cm *CastMember) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case castmember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int(value.Int64)
		case castmember.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cm.Name = value.String
			}
		case castmember.FieldCharacterName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field character_name", values[i])
			} else if value.Valid {
				cm.CharacterName = value.String
			}
		case castmember.FieldProfilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_path", values[i])
			} else if value.Valid {
				cm.ProfilePath = value.String
			}
		case castmember.FieldSeasonID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field season_id", values[i])
			} else if value.Valid {
				cm.SeasonID = int(value.Int64)
			}
		case castmember.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field bangumi_cast_members", value)
			} else if value.Valid {
				cm.bangumi_cast_members = new(int)
				*cm.bangumi_cast_members = int(value.Int64)
			}
		case castmember.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field episode_cast_members", value)
			} else if value.Valid {
				cm.episode_cast_members = new(int)
				*cm.episode_cast_members = int(value.Int64)
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CastMember.
// This includes values selected through modifiers, order, etc.
func (cm *CastMember) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// QuerySeason queries the "season" edge of the CastMember entity.
func (cm *CastMember) QuerySeason() *SeasonQuery {
	return NewCastMemberClient(cm.config).QuerySeason(cm)
}

// Update returns a builder for updating this CastMember.
// Note that you need to call CastMember.Unwrap() before calling this method if this CastMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *CastMember) Update() *CastMemberUpdateOne {
	return NewCastMemberClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the CastMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *CastMember) Unwrap() *CastMember {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: CastMember is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *CastMember) String() string {
	var builder strings.Builder
	builder.WriteString("CastMember(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("name=")
	builder.WriteString(cm.Name)
	builder.WriteString(", ")
	builder.WriteString("character_name=")
	builder.WriteString(cm.CharacterName)
	builder.WriteString(", ")
	builder.WriteString("profile_path=")
	builder.WriteString(cm.ProfilePath)
	builder.WriteString(", ")
	builder.WriteString("season_id=")
	builder.WriteString(fmt.Sprintf("%v", cm.SeasonID))
	builder.WriteByte(')')
	return builder.String()
}

// CastMembers is a parsable slice of CastMember.
type CastMembers []*CastMember
