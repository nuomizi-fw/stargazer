// Code generated by ent, DO NOT EDIT.

package castmember

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nuomizi-fw/stargazer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CastMember {
	return predicate.CastMember(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CastMember {
	return predicate.CastMember(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CastMember {
	return predicate.CastMember(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CastMember {
	return predicate.CastMember(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CastMember {
	return predicate.CastMember(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CastMember {
	return predicate.CastMember(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CastMember {
	return predicate.CastMember(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CastMember {
	return predicate.CastMember(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CastMember {
	return predicate.CastMember(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldEQ(FieldName, v))
}

// CharacterName applies equality check predicate on the "character_name" field. It's identical to CharacterNameEQ.
func CharacterName(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldEQ(FieldCharacterName, v))
}

// ProfilePath applies equality check predicate on the "profile_path" field. It's identical to ProfilePathEQ.
func ProfilePath(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldEQ(FieldProfilePath, v))
}

// SeasonID applies equality check predicate on the "season_id" field. It's identical to SeasonIDEQ.
func SeasonID(v int) predicate.CastMember {
	return predicate.CastMember(sql.FieldEQ(FieldSeasonID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CastMember {
	return predicate.CastMember(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CastMember {
	return predicate.CastMember(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldContainsFold(FieldName, v))
}

// CharacterNameEQ applies the EQ predicate on the "character_name" field.
func CharacterNameEQ(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldEQ(FieldCharacterName, v))
}

// CharacterNameNEQ applies the NEQ predicate on the "character_name" field.
func CharacterNameNEQ(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldNEQ(FieldCharacterName, v))
}

// CharacterNameIn applies the In predicate on the "character_name" field.
func CharacterNameIn(vs ...string) predicate.CastMember {
	return predicate.CastMember(sql.FieldIn(FieldCharacterName, vs...))
}

// CharacterNameNotIn applies the NotIn predicate on the "character_name" field.
func CharacterNameNotIn(vs ...string) predicate.CastMember {
	return predicate.CastMember(sql.FieldNotIn(FieldCharacterName, vs...))
}

// CharacterNameGT applies the GT predicate on the "character_name" field.
func CharacterNameGT(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldGT(FieldCharacterName, v))
}

// CharacterNameGTE applies the GTE predicate on the "character_name" field.
func CharacterNameGTE(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldGTE(FieldCharacterName, v))
}

// CharacterNameLT applies the LT predicate on the "character_name" field.
func CharacterNameLT(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldLT(FieldCharacterName, v))
}

// CharacterNameLTE applies the LTE predicate on the "character_name" field.
func CharacterNameLTE(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldLTE(FieldCharacterName, v))
}

// CharacterNameContains applies the Contains predicate on the "character_name" field.
func CharacterNameContains(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldContains(FieldCharacterName, v))
}

// CharacterNameHasPrefix applies the HasPrefix predicate on the "character_name" field.
func CharacterNameHasPrefix(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldHasPrefix(FieldCharacterName, v))
}

// CharacterNameHasSuffix applies the HasSuffix predicate on the "character_name" field.
func CharacterNameHasSuffix(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldHasSuffix(FieldCharacterName, v))
}

// CharacterNameIsNil applies the IsNil predicate on the "character_name" field.
func CharacterNameIsNil() predicate.CastMember {
	return predicate.CastMember(sql.FieldIsNull(FieldCharacterName))
}

// CharacterNameNotNil applies the NotNil predicate on the "character_name" field.
func CharacterNameNotNil() predicate.CastMember {
	return predicate.CastMember(sql.FieldNotNull(FieldCharacterName))
}

// CharacterNameEqualFold applies the EqualFold predicate on the "character_name" field.
func CharacterNameEqualFold(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldEqualFold(FieldCharacterName, v))
}

// CharacterNameContainsFold applies the ContainsFold predicate on the "character_name" field.
func CharacterNameContainsFold(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldContainsFold(FieldCharacterName, v))
}

// ProfilePathEQ applies the EQ predicate on the "profile_path" field.
func ProfilePathEQ(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldEQ(FieldProfilePath, v))
}

// ProfilePathNEQ applies the NEQ predicate on the "profile_path" field.
func ProfilePathNEQ(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldNEQ(FieldProfilePath, v))
}

// ProfilePathIn applies the In predicate on the "profile_path" field.
func ProfilePathIn(vs ...string) predicate.CastMember {
	return predicate.CastMember(sql.FieldIn(FieldProfilePath, vs...))
}

// ProfilePathNotIn applies the NotIn predicate on the "profile_path" field.
func ProfilePathNotIn(vs ...string) predicate.CastMember {
	return predicate.CastMember(sql.FieldNotIn(FieldProfilePath, vs...))
}

// ProfilePathGT applies the GT predicate on the "profile_path" field.
func ProfilePathGT(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldGT(FieldProfilePath, v))
}

// ProfilePathGTE applies the GTE predicate on the "profile_path" field.
func ProfilePathGTE(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldGTE(FieldProfilePath, v))
}

// ProfilePathLT applies the LT predicate on the "profile_path" field.
func ProfilePathLT(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldLT(FieldProfilePath, v))
}

// ProfilePathLTE applies the LTE predicate on the "profile_path" field.
func ProfilePathLTE(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldLTE(FieldProfilePath, v))
}

// ProfilePathContains applies the Contains predicate on the "profile_path" field.
func ProfilePathContains(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldContains(FieldProfilePath, v))
}

// ProfilePathHasPrefix applies the HasPrefix predicate on the "profile_path" field.
func ProfilePathHasPrefix(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldHasPrefix(FieldProfilePath, v))
}

// ProfilePathHasSuffix applies the HasSuffix predicate on the "profile_path" field.
func ProfilePathHasSuffix(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldHasSuffix(FieldProfilePath, v))
}

// ProfilePathIsNil applies the IsNil predicate on the "profile_path" field.
func ProfilePathIsNil() predicate.CastMember {
	return predicate.CastMember(sql.FieldIsNull(FieldProfilePath))
}

// ProfilePathNotNil applies the NotNil predicate on the "profile_path" field.
func ProfilePathNotNil() predicate.CastMember {
	return predicate.CastMember(sql.FieldNotNull(FieldProfilePath))
}

// ProfilePathEqualFold applies the EqualFold predicate on the "profile_path" field.
func ProfilePathEqualFold(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldEqualFold(FieldProfilePath, v))
}

// ProfilePathContainsFold applies the ContainsFold predicate on the "profile_path" field.
func ProfilePathContainsFold(v string) predicate.CastMember {
	return predicate.CastMember(sql.FieldContainsFold(FieldProfilePath, v))
}

// SeasonIDEQ applies the EQ predicate on the "season_id" field.
func SeasonIDEQ(v int) predicate.CastMember {
	return predicate.CastMember(sql.FieldEQ(FieldSeasonID, v))
}

// SeasonIDNEQ applies the NEQ predicate on the "season_id" field.
func SeasonIDNEQ(v int) predicate.CastMember {
	return predicate.CastMember(sql.FieldNEQ(FieldSeasonID, v))
}

// SeasonIDIn applies the In predicate on the "season_id" field.
func SeasonIDIn(vs ...int) predicate.CastMember {
	return predicate.CastMember(sql.FieldIn(FieldSeasonID, vs...))
}

// SeasonIDNotIn applies the NotIn predicate on the "season_id" field.
func SeasonIDNotIn(vs ...int) predicate.CastMember {
	return predicate.CastMember(sql.FieldNotIn(FieldSeasonID, vs...))
}

// SeasonIDIsNil applies the IsNil predicate on the "season_id" field.
func SeasonIDIsNil() predicate.CastMember {
	return predicate.CastMember(sql.FieldIsNull(FieldSeasonID))
}

// SeasonIDNotNil applies the NotNil predicate on the "season_id" field.
func SeasonIDNotNil() predicate.CastMember {
	return predicate.CastMember(sql.FieldNotNull(FieldSeasonID))
}

// HasSeason applies the HasEdge predicate on the "season" edge.
func HasSeason() predicate.CastMember {
	return predicate.CastMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeasonTable, SeasonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeasonWith applies the HasEdge predicate on the "season" edge with a given conditions (other predicates).
func HasSeasonWith(preds ...predicate.Season) predicate.CastMember {
	return predicate.CastMember(func(s *sql.Selector) {
		step := newSeasonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CastMember) predicate.CastMember {
	return predicate.CastMember(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CastMember) predicate.CastMember {
	return predicate.CastMember(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CastMember) predicate.CastMember {
	return predicate.CastMember(sql.NotPredicates(p))
}
