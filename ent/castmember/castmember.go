// Code generated by ent, DO NOT EDIT.

package castmember

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the castmember type in the database.
	Label = "cast_member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCharacterName holds the string denoting the character_name field in the database.
	FieldCharacterName = "character_name"
	// FieldProfilePath holds the string denoting the profile_path field in the database.
	FieldProfilePath = "profile_path"
	// FieldSeasonID holds the string denoting the season_id field in the database.
	FieldSeasonID = "season_id"
	// EdgeSeason holds the string denoting the season edge name in mutations.
	EdgeSeason = "season"
	// Table holds the table name of the castmember in the database.
	Table = "cast_members"
	// SeasonTable is the table that holds the season relation/edge.
	SeasonTable = "cast_members"
	// SeasonInverseTable is the table name for the Season entity.
	// It exists in this package in order to avoid circular dependency with the "season" package.
	SeasonInverseTable = "seasons"
	// SeasonColumn is the table column denoting the season relation/edge.
	SeasonColumn = "season_id"
)

// Columns holds all SQL columns for castmember fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCharacterName,
	FieldProfilePath,
	FieldSeasonID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cast_members"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"bangumi_cast_members",
	"episode_cast_members",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SeasonIDValidator is a validator for the "season_id" field. It is called by the builders before save.
	SeasonIDValidator func(int) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the CastMember queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCharacterName orders the results by the character_name field.
func ByCharacterName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCharacterName, opts...).ToFunc()
}

// ByProfilePath orders the results by the profile_path field.
func ByProfilePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfilePath, opts...).ToFunc()
}

// BySeasonID orders the results by the season_id field.
func BySeasonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeasonID, opts...).ToFunc()
}

// BySeasonField orders the results by season field.
func BySeasonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeasonStep(), sql.OrderByField(field, opts...))
	}
}
func newSeasonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeasonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SeasonTable, SeasonColumn),
	)
}
