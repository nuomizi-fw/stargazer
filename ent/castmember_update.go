// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nuomizi-fw/stargazer/ent/castmember"
	"github.com/nuomizi-fw/stargazer/ent/predicate"
	"github.com/nuomizi-fw/stargazer/ent/season"
)

// CastMemberUpdate is the builder for updating CastMember entities.
type CastMemberUpdate struct {
	config
	hooks    []Hook
	mutation *CastMemberMutation
}

// Where appends a list predicates to the CastMemberUpdate builder.
func (cmu *CastMemberUpdate) Where(ps ...predicate.CastMember) *CastMemberUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetName sets the "name" field.
func (cmu *CastMemberUpdate) SetName(s string) *CastMemberUpdate {
	cmu.mutation.SetName(s)
	return cmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cmu *CastMemberUpdate) SetNillableName(s *string) *CastMemberUpdate {
	if s != nil {
		cmu.SetName(*s)
	}
	return cmu
}

// SetCharacterName sets the "character_name" field.
func (cmu *CastMemberUpdate) SetCharacterName(s string) *CastMemberUpdate {
	cmu.mutation.SetCharacterName(s)
	return cmu
}

// SetNillableCharacterName sets the "character_name" field if the given value is not nil.
func (cmu *CastMemberUpdate) SetNillableCharacterName(s *string) *CastMemberUpdate {
	if s != nil {
		cmu.SetCharacterName(*s)
	}
	return cmu
}

// ClearCharacterName clears the value of the "character_name" field.
func (cmu *CastMemberUpdate) ClearCharacterName() *CastMemberUpdate {
	cmu.mutation.ClearCharacterName()
	return cmu
}

// SetProfilePath sets the "profile_path" field.
func (cmu *CastMemberUpdate) SetProfilePath(s string) *CastMemberUpdate {
	cmu.mutation.SetProfilePath(s)
	return cmu
}

// SetNillableProfilePath sets the "profile_path" field if the given value is not nil.
func (cmu *CastMemberUpdate) SetNillableProfilePath(s *string) *CastMemberUpdate {
	if s != nil {
		cmu.SetProfilePath(*s)
	}
	return cmu
}

// ClearProfilePath clears the value of the "profile_path" field.
func (cmu *CastMemberUpdate) ClearProfilePath() *CastMemberUpdate {
	cmu.mutation.ClearProfilePath()
	return cmu
}

// SetSeasonID sets the "season_id" field.
func (cmu *CastMemberUpdate) SetSeasonID(i int) *CastMemberUpdate {
	cmu.mutation.SetSeasonID(i)
	return cmu
}

// SetNillableSeasonID sets the "season_id" field if the given value is not nil.
func (cmu *CastMemberUpdate) SetNillableSeasonID(i *int) *CastMemberUpdate {
	if i != nil {
		cmu.SetSeasonID(*i)
	}
	return cmu
}

// ClearSeasonID clears the value of the "season_id" field.
func (cmu *CastMemberUpdate) ClearSeasonID() *CastMemberUpdate {
	cmu.mutation.ClearSeasonID()
	return cmu
}

// SetSeason sets the "season" edge to the Season entity.
func (cmu *CastMemberUpdate) SetSeason(s *Season) *CastMemberUpdate {
	return cmu.SetSeasonID(s.ID)
}

// Mutation returns the CastMemberMutation object of the builder.
func (cmu *CastMemberUpdate) Mutation() *CastMemberMutation {
	return cmu.mutation
}

// ClearSeason clears the "season" edge to the Season entity.
func (cmu *CastMemberUpdate) ClearSeason() *CastMemberUpdate {
	cmu.mutation.ClearSeason()
	return cmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *CastMemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *CastMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *CastMemberUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *CastMemberUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmu *CastMemberUpdate) check() error {
	if v, ok := cmu.mutation.Name(); ok {
		if err := castmember.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CastMember.name": %w`, err)}
		}
	}
	if v, ok := cmu.mutation.SeasonID(); ok {
		if err := castmember.SeasonIDValidator(v); err != nil {
			return &ValidationError{Name: "season_id", err: fmt.Errorf(`ent: validator failed for field "CastMember.season_id": %w`, err)}
		}
	}
	return nil
}

func (cmu *CastMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(castmember.Table, castmember.Columns, sqlgraph.NewFieldSpec(castmember.FieldID, field.TypeInt))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.Name(); ok {
		_spec.SetField(castmember.FieldName, field.TypeString, value)
	}
	if value, ok := cmu.mutation.CharacterName(); ok {
		_spec.SetField(castmember.FieldCharacterName, field.TypeString, value)
	}
	if cmu.mutation.CharacterNameCleared() {
		_spec.ClearField(castmember.FieldCharacterName, field.TypeString)
	}
	if value, ok := cmu.mutation.ProfilePath(); ok {
		_spec.SetField(castmember.FieldProfilePath, field.TypeString, value)
	}
	if cmu.mutation.ProfilePathCleared() {
		_spec.ClearField(castmember.FieldProfilePath, field.TypeString)
	}
	if cmu.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   castmember.SeasonTable,
			Columns: []string{castmember.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   castmember.SeasonTable,
			Columns: []string{castmember.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{castmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// CastMemberUpdateOne is the builder for updating a single CastMember entity.
type CastMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CastMemberMutation
}

// SetName sets the "name" field.
func (cmuo *CastMemberUpdateOne) SetName(s string) *CastMemberUpdateOne {
	cmuo.mutation.SetName(s)
	return cmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cmuo *CastMemberUpdateOne) SetNillableName(s *string) *CastMemberUpdateOne {
	if s != nil {
		cmuo.SetName(*s)
	}
	return cmuo
}

// SetCharacterName sets the "character_name" field.
func (cmuo *CastMemberUpdateOne) SetCharacterName(s string) *CastMemberUpdateOne {
	cmuo.mutation.SetCharacterName(s)
	return cmuo
}

// SetNillableCharacterName sets the "character_name" field if the given value is not nil.
func (cmuo *CastMemberUpdateOne) SetNillableCharacterName(s *string) *CastMemberUpdateOne {
	if s != nil {
		cmuo.SetCharacterName(*s)
	}
	return cmuo
}

// ClearCharacterName clears the value of the "character_name" field.
func (cmuo *CastMemberUpdateOne) ClearCharacterName() *CastMemberUpdateOne {
	cmuo.mutation.ClearCharacterName()
	return cmuo
}

// SetProfilePath sets the "profile_path" field.
func (cmuo *CastMemberUpdateOne) SetProfilePath(s string) *CastMemberUpdateOne {
	cmuo.mutation.SetProfilePath(s)
	return cmuo
}

// SetNillableProfilePath sets the "profile_path" field if the given value is not nil.
func (cmuo *CastMemberUpdateOne) SetNillableProfilePath(s *string) *CastMemberUpdateOne {
	if s != nil {
		cmuo.SetProfilePath(*s)
	}
	return cmuo
}

// ClearProfilePath clears the value of the "profile_path" field.
func (cmuo *CastMemberUpdateOne) ClearProfilePath() *CastMemberUpdateOne {
	cmuo.mutation.ClearProfilePath()
	return cmuo
}

// SetSeasonID sets the "season_id" field.
func (cmuo *CastMemberUpdateOne) SetSeasonID(i int) *CastMemberUpdateOne {
	cmuo.mutation.SetSeasonID(i)
	return cmuo
}

// SetNillableSeasonID sets the "season_id" field if the given value is not nil.
func (cmuo *CastMemberUpdateOne) SetNillableSeasonID(i *int) *CastMemberUpdateOne {
	if i != nil {
		cmuo.SetSeasonID(*i)
	}
	return cmuo
}

// ClearSeasonID clears the value of the "season_id" field.
func (cmuo *CastMemberUpdateOne) ClearSeasonID() *CastMemberUpdateOne {
	cmuo.mutation.ClearSeasonID()
	return cmuo
}

// SetSeason sets the "season" edge to the Season entity.
func (cmuo *CastMemberUpdateOne) SetSeason(s *Season) *CastMemberUpdateOne {
	return cmuo.SetSeasonID(s.ID)
}

// Mutation returns the CastMemberMutation object of the builder.
func (cmuo *CastMemberUpdateOne) Mutation() *CastMemberMutation {
	return cmuo.mutation
}

// ClearSeason clears the "season" edge to the Season entity.
func (cmuo *CastMemberUpdateOne) ClearSeason() *CastMemberUpdateOne {
	cmuo.mutation.ClearSeason()
	return cmuo
}

// Where appends a list predicates to the CastMemberUpdate builder.
func (cmuo *CastMemberUpdateOne) Where(ps ...predicate.CastMember) *CastMemberUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *CastMemberUpdateOne) Select(field string, fields ...string) *CastMemberUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated CastMember entity.
func (cmuo *CastMemberUpdateOne) Save(ctx context.Context) (*CastMember, error) {
	return withHooks(ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *CastMemberUpdateOne) SaveX(ctx context.Context) *CastMember {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *CastMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *CastMemberUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmuo *CastMemberUpdateOne) check() error {
	if v, ok := cmuo.mutation.Name(); ok {
		if err := castmember.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CastMember.name": %w`, err)}
		}
	}
	if v, ok := cmuo.mutation.SeasonID(); ok {
		if err := castmember.SeasonIDValidator(v); err != nil {
			return &ValidationError{Name: "season_id", err: fmt.Errorf(`ent: validator failed for field "CastMember.season_id": %w`, err)}
		}
	}
	return nil
}

func (cmuo *CastMemberUpdateOne) sqlSave(ctx context.Context) (_node *CastMember, err error) {
	if err := cmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(castmember.Table, castmember.Columns, sqlgraph.NewFieldSpec(castmember.FieldID, field.TypeInt))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CastMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, castmember.FieldID)
		for _, f := range fields {
			if !castmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != castmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.Name(); ok {
		_spec.SetField(castmember.FieldName, field.TypeString, value)
	}
	if value, ok := cmuo.mutation.CharacterName(); ok {
		_spec.SetField(castmember.FieldCharacterName, field.TypeString, value)
	}
	if cmuo.mutation.CharacterNameCleared() {
		_spec.ClearField(castmember.FieldCharacterName, field.TypeString)
	}
	if value, ok := cmuo.mutation.ProfilePath(); ok {
		_spec.SetField(castmember.FieldProfilePath, field.TypeString, value)
	}
	if cmuo.mutation.ProfilePathCleared() {
		_spec.ClearField(castmember.FieldProfilePath, field.TypeString)
	}
	if cmuo.mutation.SeasonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   castmember.SeasonTable,
			Columns: []string{castmember.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.SeasonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   castmember.SeasonTable,
			Columns: []string{castmember.SeasonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CastMember{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{castmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
