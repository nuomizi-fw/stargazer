// Code generated by ent, DO NOT EDIT.

package season

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the season type in the database.
	Label = "season"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSeasonNumber holds the string denoting the season_number field in the database.
	FieldSeasonNumber = "season_number"
	// FieldAirDate holds the string denoting the air_date field in the database.
	FieldAirDate = "air_date"
	// FieldEpisodeCount holds the string denoting the episode_count field in the database.
	FieldEpisodeCount = "episode_count"
	// FieldBangumiID holds the string denoting the bangumi_id field in the database.
	FieldBangumiID = "bangumi_id"
	// EdgeBangumi holds the string denoting the bangumi edge name in mutations.
	EdgeBangumi = "bangumi"
	// EdgeEpisodes holds the string denoting the episodes edge name in mutations.
	EdgeEpisodes = "episodes"
	// EdgeCastMembers holds the string denoting the cast_members edge name in mutations.
	EdgeCastMembers = "cast_members"
	// Table holds the table name of the season in the database.
	Table = "seasons"
	// BangumiTable is the table that holds the bangumi relation/edge.
	BangumiTable = "seasons"
	// BangumiInverseTable is the table name for the Bangumi entity.
	// It exists in this package in order to avoid circular dependency with the "bangumi" package.
	BangumiInverseTable = "bangumis"
	// BangumiColumn is the table column denoting the bangumi relation/edge.
	BangumiColumn = "bangumi_id"
	// EpisodesTable is the table that holds the episodes relation/edge.
	EpisodesTable = "episodes"
	// EpisodesInverseTable is the table name for the Episode entity.
	// It exists in this package in order to avoid circular dependency with the "episode" package.
	EpisodesInverseTable = "episodes"
	// EpisodesColumn is the table column denoting the episodes relation/edge.
	EpisodesColumn = "season_id"
	// CastMembersTable is the table that holds the cast_members relation/edge.
	CastMembersTable = "cast_members"
	// CastMembersInverseTable is the table name for the CastMember entity.
	// It exists in this package in order to avoid circular dependency with the "castmember" package.
	CastMembersInverseTable = "cast_members"
	// CastMembersColumn is the table column denoting the cast_members relation/edge.
	CastMembersColumn = "season_id"
)

// Columns holds all SQL columns for season fields.
var Columns = []string{
	FieldID,
	FieldSeasonNumber,
	FieldAirDate,
	FieldEpisodeCount,
	FieldBangumiID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SeasonNumberValidator is a validator for the "season_number" field. It is called by the builders before save.
	SeasonNumberValidator func(int) error
	// EpisodeCountValidator is a validator for the "episode_count" field. It is called by the builders before save.
	EpisodeCountValidator func(int) error
	// BangumiIDValidator is a validator for the "bangumi_id" field. It is called by the builders before save.
	BangumiIDValidator func(int) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Season queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySeasonNumber orders the results by the season_number field.
func BySeasonNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeasonNumber, opts...).ToFunc()
}

// ByAirDate orders the results by the air_date field.
func ByAirDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAirDate, opts...).ToFunc()
}

// ByEpisodeCount orders the results by the episode_count field.
func ByEpisodeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEpisodeCount, opts...).ToFunc()
}

// ByBangumiID orders the results by the bangumi_id field.
func ByBangumiID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBangumiID, opts...).ToFunc()
}

// ByBangumiField orders the results by bangumi field.
func ByBangumiField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBangumiStep(), sql.OrderByField(field, opts...))
	}
}

// ByEpisodesCount orders the results by episodes count.
func ByEpisodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEpisodesStep(), opts...)
	}
}

// ByEpisodes orders the results by episodes terms.
func ByEpisodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEpisodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCastMembersCount orders the results by cast_members count.
func ByCastMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCastMembersStep(), opts...)
	}
}

// ByCastMembers orders the results by cast_members terms.
func ByCastMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCastMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBangumiStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BangumiInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BangumiTable, BangumiColumn),
	)
}
func newEpisodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EpisodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EpisodesTable, EpisodesColumn),
	)
}
func newCastMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CastMembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CastMembersTable, CastMembersColumn),
	)
}
