// Code generated by ent, DO NOT EDIT.

package season

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nuomizi-fw/stargazer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldID, id))
}

// SeasonNumber applies equality check predicate on the "season_number" field. It's identical to SeasonNumberEQ.
func SeasonNumber(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldSeasonNumber, v))
}

// AirDate applies equality check predicate on the "air_date" field. It's identical to AirDateEQ.
func AirDate(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldAirDate, v))
}

// EpisodeCount applies equality check predicate on the "episode_count" field. It's identical to EpisodeCountEQ.
func EpisodeCount(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldEpisodeCount, v))
}

// BangumiID applies equality check predicate on the "bangumi_id" field. It's identical to BangumiIDEQ.
func BangumiID(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldBangumiID, v))
}

// SeasonNumberEQ applies the EQ predicate on the "season_number" field.
func SeasonNumberEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldSeasonNumber, v))
}

// SeasonNumberNEQ applies the NEQ predicate on the "season_number" field.
func SeasonNumberNEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldSeasonNumber, v))
}

// SeasonNumberIn applies the In predicate on the "season_number" field.
func SeasonNumberIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldSeasonNumber, vs...))
}

// SeasonNumberNotIn applies the NotIn predicate on the "season_number" field.
func SeasonNumberNotIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldSeasonNumber, vs...))
}

// SeasonNumberGT applies the GT predicate on the "season_number" field.
func SeasonNumberGT(v int) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldSeasonNumber, v))
}

// SeasonNumberGTE applies the GTE predicate on the "season_number" field.
func SeasonNumberGTE(v int) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldSeasonNumber, v))
}

// SeasonNumberLT applies the LT predicate on the "season_number" field.
func SeasonNumberLT(v int) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldSeasonNumber, v))
}

// SeasonNumberLTE applies the LTE predicate on the "season_number" field.
func SeasonNumberLTE(v int) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldSeasonNumber, v))
}

// AirDateEQ applies the EQ predicate on the "air_date" field.
func AirDateEQ(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldAirDate, v))
}

// AirDateNEQ applies the NEQ predicate on the "air_date" field.
func AirDateNEQ(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldAirDate, v))
}

// AirDateIn applies the In predicate on the "air_date" field.
func AirDateIn(vs ...time.Time) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldAirDate, vs...))
}

// AirDateNotIn applies the NotIn predicate on the "air_date" field.
func AirDateNotIn(vs ...time.Time) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldAirDate, vs...))
}

// AirDateGT applies the GT predicate on the "air_date" field.
func AirDateGT(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldAirDate, v))
}

// AirDateGTE applies the GTE predicate on the "air_date" field.
func AirDateGTE(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldAirDate, v))
}

// AirDateLT applies the LT predicate on the "air_date" field.
func AirDateLT(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldAirDate, v))
}

// AirDateLTE applies the LTE predicate on the "air_date" field.
func AirDateLTE(v time.Time) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldAirDate, v))
}

// AirDateIsNil applies the IsNil predicate on the "air_date" field.
func AirDateIsNil() predicate.Season {
	return predicate.Season(sql.FieldIsNull(FieldAirDate))
}

// AirDateNotNil applies the NotNil predicate on the "air_date" field.
func AirDateNotNil() predicate.Season {
	return predicate.Season(sql.FieldNotNull(FieldAirDate))
}

// EpisodeCountEQ applies the EQ predicate on the "episode_count" field.
func EpisodeCountEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldEpisodeCount, v))
}

// EpisodeCountNEQ applies the NEQ predicate on the "episode_count" field.
func EpisodeCountNEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldEpisodeCount, v))
}

// EpisodeCountIn applies the In predicate on the "episode_count" field.
func EpisodeCountIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldEpisodeCount, vs...))
}

// EpisodeCountNotIn applies the NotIn predicate on the "episode_count" field.
func EpisodeCountNotIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldEpisodeCount, vs...))
}

// EpisodeCountGT applies the GT predicate on the "episode_count" field.
func EpisodeCountGT(v int) predicate.Season {
	return predicate.Season(sql.FieldGT(FieldEpisodeCount, v))
}

// EpisodeCountGTE applies the GTE predicate on the "episode_count" field.
func EpisodeCountGTE(v int) predicate.Season {
	return predicate.Season(sql.FieldGTE(FieldEpisodeCount, v))
}

// EpisodeCountLT applies the LT predicate on the "episode_count" field.
func EpisodeCountLT(v int) predicate.Season {
	return predicate.Season(sql.FieldLT(FieldEpisodeCount, v))
}

// EpisodeCountLTE applies the LTE predicate on the "episode_count" field.
func EpisodeCountLTE(v int) predicate.Season {
	return predicate.Season(sql.FieldLTE(FieldEpisodeCount, v))
}

// BangumiIDEQ applies the EQ predicate on the "bangumi_id" field.
func BangumiIDEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldEQ(FieldBangumiID, v))
}

// BangumiIDNEQ applies the NEQ predicate on the "bangumi_id" field.
func BangumiIDNEQ(v int) predicate.Season {
	return predicate.Season(sql.FieldNEQ(FieldBangumiID, v))
}

// BangumiIDIn applies the In predicate on the "bangumi_id" field.
func BangumiIDIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldIn(FieldBangumiID, vs...))
}

// BangumiIDNotIn applies the NotIn predicate on the "bangumi_id" field.
func BangumiIDNotIn(vs ...int) predicate.Season {
	return predicate.Season(sql.FieldNotIn(FieldBangumiID, vs...))
}

// BangumiIDIsNil applies the IsNil predicate on the "bangumi_id" field.
func BangumiIDIsNil() predicate.Season {
	return predicate.Season(sql.FieldIsNull(FieldBangumiID))
}

// BangumiIDNotNil applies the NotNil predicate on the "bangumi_id" field.
func BangumiIDNotNil() predicate.Season {
	return predicate.Season(sql.FieldNotNull(FieldBangumiID))
}

// HasBangumi applies the HasEdge predicate on the "bangumi" edge.
func HasBangumi() predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BangumiTable, BangumiColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBangumiWith applies the HasEdge predicate on the "bangumi" edge with a given conditions (other predicates).
func HasBangumiWith(preds ...predicate.Bangumi) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := newBangumiStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEpisodes applies the HasEdge predicate on the "episodes" edge.
func HasEpisodes() predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EpisodesTable, EpisodesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEpisodesWith applies the HasEdge predicate on the "episodes" edge with a given conditions (other predicates).
func HasEpisodesWith(preds ...predicate.Episode) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := newEpisodesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCastMembers applies the HasEdge predicate on the "cast_members" edge.
func HasCastMembers() predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CastMembersTable, CastMembersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCastMembersWith applies the HasEdge predicate on the "cast_members" edge with a given conditions (other predicates).
func HasCastMembersWith(preds ...predicate.CastMember) predicate.Season {
	return predicate.Season(func(s *sql.Selector) {
		step := newCastMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Season) predicate.Season {
	return predicate.Season(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Season) predicate.Season {
	return predicate.Season(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Season) predicate.Season {
	return predicate.Season(sql.NotPredicates(p))
}
