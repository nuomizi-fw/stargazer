// Code generated by ent, DO NOT EDIT.

package bangumi

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nuomizi-fw/stargazer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldTitle, v))
}

// EnglishTitle applies equality check predicate on the "english_title" field. It's identical to EnglishTitleEQ.
func EnglishTitle(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldEnglishTitle, v))
}

// JapaneseTitle applies equality check predicate on the "japanese_title" field. It's identical to JapaneseTitleEQ.
func JapaneseTitle(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldJapaneseTitle, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldStatus, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v float64) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldScore, v))
}

// Tags applies equality check predicate on the "tags" field. It's identical to TagsEQ.
func Tags(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldTags, v))
}

// Synopsis applies equality check predicate on the "synopsis" field. It's identical to SynopsisEQ.
func Synopsis(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldSynopsis, v))
}

// CoverImage applies equality check predicate on the "cover_image" field. It's identical to CoverImageEQ.
func CoverImage(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldCoverImage, v))
}

// TrailerURL applies equality check predicate on the "trailer_url" field. It's identical to TrailerURLEQ.
func TrailerURL(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldTrailerURL, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContainsFold(FieldTitle, v))
}

// EnglishTitleEQ applies the EQ predicate on the "english_title" field.
func EnglishTitleEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldEnglishTitle, v))
}

// EnglishTitleNEQ applies the NEQ predicate on the "english_title" field.
func EnglishTitleNEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNEQ(FieldEnglishTitle, v))
}

// EnglishTitleIn applies the In predicate on the "english_title" field.
func EnglishTitleIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIn(FieldEnglishTitle, vs...))
}

// EnglishTitleNotIn applies the NotIn predicate on the "english_title" field.
func EnglishTitleNotIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotIn(FieldEnglishTitle, vs...))
}

// EnglishTitleGT applies the GT predicate on the "english_title" field.
func EnglishTitleGT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGT(FieldEnglishTitle, v))
}

// EnglishTitleGTE applies the GTE predicate on the "english_title" field.
func EnglishTitleGTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGTE(FieldEnglishTitle, v))
}

// EnglishTitleLT applies the LT predicate on the "english_title" field.
func EnglishTitleLT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLT(FieldEnglishTitle, v))
}

// EnglishTitleLTE applies the LTE predicate on the "english_title" field.
func EnglishTitleLTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLTE(FieldEnglishTitle, v))
}

// EnglishTitleContains applies the Contains predicate on the "english_title" field.
func EnglishTitleContains(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContains(FieldEnglishTitle, v))
}

// EnglishTitleHasPrefix applies the HasPrefix predicate on the "english_title" field.
func EnglishTitleHasPrefix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasPrefix(FieldEnglishTitle, v))
}

// EnglishTitleHasSuffix applies the HasSuffix predicate on the "english_title" field.
func EnglishTitleHasSuffix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasSuffix(FieldEnglishTitle, v))
}

// EnglishTitleIsNil applies the IsNil predicate on the "english_title" field.
func EnglishTitleIsNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIsNull(FieldEnglishTitle))
}

// EnglishTitleNotNil applies the NotNil predicate on the "english_title" field.
func EnglishTitleNotNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotNull(FieldEnglishTitle))
}

// EnglishTitleEqualFold applies the EqualFold predicate on the "english_title" field.
func EnglishTitleEqualFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEqualFold(FieldEnglishTitle, v))
}

// EnglishTitleContainsFold applies the ContainsFold predicate on the "english_title" field.
func EnglishTitleContainsFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContainsFold(FieldEnglishTitle, v))
}

// JapaneseTitleEQ applies the EQ predicate on the "japanese_title" field.
func JapaneseTitleEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldJapaneseTitle, v))
}

// JapaneseTitleNEQ applies the NEQ predicate on the "japanese_title" field.
func JapaneseTitleNEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNEQ(FieldJapaneseTitle, v))
}

// JapaneseTitleIn applies the In predicate on the "japanese_title" field.
func JapaneseTitleIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIn(FieldJapaneseTitle, vs...))
}

// JapaneseTitleNotIn applies the NotIn predicate on the "japanese_title" field.
func JapaneseTitleNotIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotIn(FieldJapaneseTitle, vs...))
}

// JapaneseTitleGT applies the GT predicate on the "japanese_title" field.
func JapaneseTitleGT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGT(FieldJapaneseTitle, v))
}

// JapaneseTitleGTE applies the GTE predicate on the "japanese_title" field.
func JapaneseTitleGTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGTE(FieldJapaneseTitle, v))
}

// JapaneseTitleLT applies the LT predicate on the "japanese_title" field.
func JapaneseTitleLT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLT(FieldJapaneseTitle, v))
}

// JapaneseTitleLTE applies the LTE predicate on the "japanese_title" field.
func JapaneseTitleLTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLTE(FieldJapaneseTitle, v))
}

// JapaneseTitleContains applies the Contains predicate on the "japanese_title" field.
func JapaneseTitleContains(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContains(FieldJapaneseTitle, v))
}

// JapaneseTitleHasPrefix applies the HasPrefix predicate on the "japanese_title" field.
func JapaneseTitleHasPrefix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasPrefix(FieldJapaneseTitle, v))
}

// JapaneseTitleHasSuffix applies the HasSuffix predicate on the "japanese_title" field.
func JapaneseTitleHasSuffix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasSuffix(FieldJapaneseTitle, v))
}

// JapaneseTitleIsNil applies the IsNil predicate on the "japanese_title" field.
func JapaneseTitleIsNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIsNull(FieldJapaneseTitle))
}

// JapaneseTitleNotNil applies the NotNil predicate on the "japanese_title" field.
func JapaneseTitleNotNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotNull(FieldJapaneseTitle))
}

// JapaneseTitleEqualFold applies the EqualFold predicate on the "japanese_title" field.
func JapaneseTitleEqualFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEqualFold(FieldJapaneseTitle, v))
}

// JapaneseTitleContainsFold applies the ContainsFold predicate on the "japanese_title" field.
func JapaneseTitleContainsFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContainsFold(FieldJapaneseTitle, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContainsFold(FieldType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContainsFold(FieldStatus, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v float64) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v float64) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...float64) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...float64) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v float64) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v float64) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v float64) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v float64) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLTE(FieldScore, v))
}

// ScoreIsNil applies the IsNil predicate on the "score" field.
func ScoreIsNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIsNull(FieldScore))
}

// ScoreNotNil applies the NotNil predicate on the "score" field.
func ScoreNotNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotNull(FieldScore))
}

// TagsEQ applies the EQ predicate on the "tags" field.
func TagsEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldTags, v))
}

// TagsNEQ applies the NEQ predicate on the "tags" field.
func TagsNEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNEQ(FieldTags, v))
}

// TagsIn applies the In predicate on the "tags" field.
func TagsIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIn(FieldTags, vs...))
}

// TagsNotIn applies the NotIn predicate on the "tags" field.
func TagsNotIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotIn(FieldTags, vs...))
}

// TagsGT applies the GT predicate on the "tags" field.
func TagsGT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGT(FieldTags, v))
}

// TagsGTE applies the GTE predicate on the "tags" field.
func TagsGTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGTE(FieldTags, v))
}

// TagsLT applies the LT predicate on the "tags" field.
func TagsLT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLT(FieldTags, v))
}

// TagsLTE applies the LTE predicate on the "tags" field.
func TagsLTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLTE(FieldTags, v))
}

// TagsContains applies the Contains predicate on the "tags" field.
func TagsContains(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContains(FieldTags, v))
}

// TagsHasPrefix applies the HasPrefix predicate on the "tags" field.
func TagsHasPrefix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasPrefix(FieldTags, v))
}

// TagsHasSuffix applies the HasSuffix predicate on the "tags" field.
func TagsHasSuffix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasSuffix(FieldTags, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotNull(FieldTags))
}

// TagsEqualFold applies the EqualFold predicate on the "tags" field.
func TagsEqualFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEqualFold(FieldTags, v))
}

// TagsContainsFold applies the ContainsFold predicate on the "tags" field.
func TagsContainsFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContainsFold(FieldTags, v))
}

// SynopsisEQ applies the EQ predicate on the "synopsis" field.
func SynopsisEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldSynopsis, v))
}

// SynopsisNEQ applies the NEQ predicate on the "synopsis" field.
func SynopsisNEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNEQ(FieldSynopsis, v))
}

// SynopsisIn applies the In predicate on the "synopsis" field.
func SynopsisIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIn(FieldSynopsis, vs...))
}

// SynopsisNotIn applies the NotIn predicate on the "synopsis" field.
func SynopsisNotIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotIn(FieldSynopsis, vs...))
}

// SynopsisGT applies the GT predicate on the "synopsis" field.
func SynopsisGT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGT(FieldSynopsis, v))
}

// SynopsisGTE applies the GTE predicate on the "synopsis" field.
func SynopsisGTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGTE(FieldSynopsis, v))
}

// SynopsisLT applies the LT predicate on the "synopsis" field.
func SynopsisLT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLT(FieldSynopsis, v))
}

// SynopsisLTE applies the LTE predicate on the "synopsis" field.
func SynopsisLTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLTE(FieldSynopsis, v))
}

// SynopsisContains applies the Contains predicate on the "synopsis" field.
func SynopsisContains(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContains(FieldSynopsis, v))
}

// SynopsisHasPrefix applies the HasPrefix predicate on the "synopsis" field.
func SynopsisHasPrefix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasPrefix(FieldSynopsis, v))
}

// SynopsisHasSuffix applies the HasSuffix predicate on the "synopsis" field.
func SynopsisHasSuffix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasSuffix(FieldSynopsis, v))
}

// SynopsisIsNil applies the IsNil predicate on the "synopsis" field.
func SynopsisIsNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIsNull(FieldSynopsis))
}

// SynopsisNotNil applies the NotNil predicate on the "synopsis" field.
func SynopsisNotNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotNull(FieldSynopsis))
}

// SynopsisEqualFold applies the EqualFold predicate on the "synopsis" field.
func SynopsisEqualFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEqualFold(FieldSynopsis, v))
}

// SynopsisContainsFold applies the ContainsFold predicate on the "synopsis" field.
func SynopsisContainsFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContainsFold(FieldSynopsis, v))
}

// CoverImageEQ applies the EQ predicate on the "cover_image" field.
func CoverImageEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldCoverImage, v))
}

// CoverImageNEQ applies the NEQ predicate on the "cover_image" field.
func CoverImageNEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNEQ(FieldCoverImage, v))
}

// CoverImageIn applies the In predicate on the "cover_image" field.
func CoverImageIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIn(FieldCoverImage, vs...))
}

// CoverImageNotIn applies the NotIn predicate on the "cover_image" field.
func CoverImageNotIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotIn(FieldCoverImage, vs...))
}

// CoverImageGT applies the GT predicate on the "cover_image" field.
func CoverImageGT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGT(FieldCoverImage, v))
}

// CoverImageGTE applies the GTE predicate on the "cover_image" field.
func CoverImageGTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGTE(FieldCoverImage, v))
}

// CoverImageLT applies the LT predicate on the "cover_image" field.
func CoverImageLT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLT(FieldCoverImage, v))
}

// CoverImageLTE applies the LTE predicate on the "cover_image" field.
func CoverImageLTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLTE(FieldCoverImage, v))
}

// CoverImageContains applies the Contains predicate on the "cover_image" field.
func CoverImageContains(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContains(FieldCoverImage, v))
}

// CoverImageHasPrefix applies the HasPrefix predicate on the "cover_image" field.
func CoverImageHasPrefix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasPrefix(FieldCoverImage, v))
}

// CoverImageHasSuffix applies the HasSuffix predicate on the "cover_image" field.
func CoverImageHasSuffix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasSuffix(FieldCoverImage, v))
}

// CoverImageIsNil applies the IsNil predicate on the "cover_image" field.
func CoverImageIsNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIsNull(FieldCoverImage))
}

// CoverImageNotNil applies the NotNil predicate on the "cover_image" field.
func CoverImageNotNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotNull(FieldCoverImage))
}

// CoverImageEqualFold applies the EqualFold predicate on the "cover_image" field.
func CoverImageEqualFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEqualFold(FieldCoverImage, v))
}

// CoverImageContainsFold applies the ContainsFold predicate on the "cover_image" field.
func CoverImageContainsFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContainsFold(FieldCoverImage, v))
}

// TrailerURLEQ applies the EQ predicate on the "trailer_url" field.
func TrailerURLEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEQ(FieldTrailerURL, v))
}

// TrailerURLNEQ applies the NEQ predicate on the "trailer_url" field.
func TrailerURLNEQ(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNEQ(FieldTrailerURL, v))
}

// TrailerURLIn applies the In predicate on the "trailer_url" field.
func TrailerURLIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIn(FieldTrailerURL, vs...))
}

// TrailerURLNotIn applies the NotIn predicate on the "trailer_url" field.
func TrailerURLNotIn(vs ...string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotIn(FieldTrailerURL, vs...))
}

// TrailerURLGT applies the GT predicate on the "trailer_url" field.
func TrailerURLGT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGT(FieldTrailerURL, v))
}

// TrailerURLGTE applies the GTE predicate on the "trailer_url" field.
func TrailerURLGTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldGTE(FieldTrailerURL, v))
}

// TrailerURLLT applies the LT predicate on the "trailer_url" field.
func TrailerURLLT(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLT(FieldTrailerURL, v))
}

// TrailerURLLTE applies the LTE predicate on the "trailer_url" field.
func TrailerURLLTE(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldLTE(FieldTrailerURL, v))
}

// TrailerURLContains applies the Contains predicate on the "trailer_url" field.
func TrailerURLContains(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContains(FieldTrailerURL, v))
}

// TrailerURLHasPrefix applies the HasPrefix predicate on the "trailer_url" field.
func TrailerURLHasPrefix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasPrefix(FieldTrailerURL, v))
}

// TrailerURLHasSuffix applies the HasSuffix predicate on the "trailer_url" field.
func TrailerURLHasSuffix(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldHasSuffix(FieldTrailerURL, v))
}

// TrailerURLIsNil applies the IsNil predicate on the "trailer_url" field.
func TrailerURLIsNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldIsNull(FieldTrailerURL))
}

// TrailerURLNotNil applies the NotNil predicate on the "trailer_url" field.
func TrailerURLNotNil() predicate.Bangumi {
	return predicate.Bangumi(sql.FieldNotNull(FieldTrailerURL))
}

// TrailerURLEqualFold applies the EqualFold predicate on the "trailer_url" field.
func TrailerURLEqualFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldEqualFold(FieldTrailerURL, v))
}

// TrailerURLContainsFold applies the ContainsFold predicate on the "trailer_url" field.
func TrailerURLContainsFold(v string) predicate.Bangumi {
	return predicate.Bangumi(sql.FieldContainsFold(FieldTrailerURL, v))
}

// HasSeasons applies the HasEdge predicate on the "seasons" edge.
func HasSeasons() predicate.Bangumi {
	return predicate.Bangumi(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SeasonsTable, SeasonsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeasonsWith applies the HasEdge predicate on the "seasons" edge with a given conditions (other predicates).
func HasSeasonsWith(preds ...predicate.Season) predicate.Bangumi {
	return predicate.Bangumi(func(s *sql.Selector) {
		step := newSeasonsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCastMembers applies the HasEdge predicate on the "cast_members" edge.
func HasCastMembers() predicate.Bangumi {
	return predicate.Bangumi(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CastMembersTable, CastMembersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCastMembersWith applies the HasEdge predicate on the "cast_members" edge with a given conditions (other predicates).
func HasCastMembersWith(preds ...predicate.CastMember) predicate.Bangumi {
	return predicate.Bangumi(func(s *sql.Selector) {
		step := newCastMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bangumi) predicate.Bangumi {
	return predicate.Bangumi(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bangumi) predicate.Bangumi {
	return predicate.Bangumi(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bangumi) predicate.Bangumi {
	return predicate.Bangumi(sql.NotPredicates(p))
}
