// Code generated by ent, DO NOT EDIT.

package bangumi

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the bangumi type in the database.
	Label = "bangumi"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldEnglishTitle holds the string denoting the english_title field in the database.
	FieldEnglishTitle = "english_title"
	// FieldJapaneseTitle holds the string denoting the japanese_title field in the database.
	FieldJapaneseTitle = "japanese_title"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldSynopsis holds the string denoting the synopsis field in the database.
	FieldSynopsis = "synopsis"
	// FieldCoverImage holds the string denoting the cover_image field in the database.
	FieldCoverImage = "cover_image"
	// FieldTrailerURL holds the string denoting the trailer_url field in the database.
	FieldTrailerURL = "trailer_url"
	// EdgeSeasons holds the string denoting the seasons edge name in mutations.
	EdgeSeasons = "seasons"
	// EdgeCastMembers holds the string denoting the cast_members edge name in mutations.
	EdgeCastMembers = "cast_members"
	// Table holds the table name of the bangumi in the database.
	Table = "bangumis"
	// SeasonsTable is the table that holds the seasons relation/edge.
	SeasonsTable = "seasons"
	// SeasonsInverseTable is the table name for the Season entity.
	// It exists in this package in order to avoid circular dependency with the "season" package.
	SeasonsInverseTable = "seasons"
	// SeasonsColumn is the table column denoting the seasons relation/edge.
	SeasonsColumn = "bangumi_id"
	// CastMembersTable is the table that holds the cast_members relation/edge.
	CastMembersTable = "cast_members"
	// CastMembersInverseTable is the table name for the CastMember entity.
	// It exists in this package in order to avoid circular dependency with the "castmember" package.
	CastMembersInverseTable = "cast_members"
	// CastMembersColumn is the table column denoting the cast_members relation/edge.
	CastMembersColumn = "bangumi_cast_members"
)

// Columns holds all SQL columns for bangumi fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldEnglishTitle,
	FieldJapaneseTitle,
	FieldType,
	FieldStatus,
	FieldScore,
	FieldTags,
	FieldSynopsis,
	FieldCoverImage,
	FieldTrailerURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Bangumi queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByEnglishTitle orders the results by the english_title field.
func ByEnglishTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnglishTitle, opts...).ToFunc()
}

// ByJapaneseTitle orders the results by the japanese_title field.
func ByJapaneseTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJapaneseTitle, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByTags orders the results by the tags field.
func ByTags(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTags, opts...).ToFunc()
}

// BySynopsis orders the results by the synopsis field.
func BySynopsis(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSynopsis, opts...).ToFunc()
}

// ByCoverImage orders the results by the cover_image field.
func ByCoverImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoverImage, opts...).ToFunc()
}

// ByTrailerURL orders the results by the trailer_url field.
func ByTrailerURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrailerURL, opts...).ToFunc()
}

// BySeasonsCount orders the results by seasons count.
func BySeasonsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSeasonsStep(), opts...)
	}
}

// BySeasons orders the results by seasons terms.
func BySeasons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeasonsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCastMembersCount orders the results by cast_members count.
func ByCastMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCastMembersStep(), opts...)
	}
}

// ByCastMembers orders the results by cast_members terms.
func ByCastMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCastMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSeasonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeasonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SeasonsTable, SeasonsColumn),
	)
}
func newCastMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CastMembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CastMembersTable, CastMembersColumn),
	)
}
