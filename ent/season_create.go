// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nuomizi-fw/stargazer/ent/bangumi"
	"github.com/nuomizi-fw/stargazer/ent/castmember"
	"github.com/nuomizi-fw/stargazer/ent/episode"
	"github.com/nuomizi-fw/stargazer/ent/season"
)

// SeasonCreate is the builder for creating a Season entity.
type SeasonCreate struct {
	config
	mutation *SeasonMutation
	hooks    []Hook
}

// SetSeasonNumber sets the "season_number" field.
func (sc *SeasonCreate) SetSeasonNumber(i int) *SeasonCreate {
	sc.mutation.SetSeasonNumber(i)
	return sc
}

// SetAirDate sets the "air_date" field.
func (sc *SeasonCreate) SetAirDate(t time.Time) *SeasonCreate {
	sc.mutation.SetAirDate(t)
	return sc
}

// SetNillableAirDate sets the "air_date" field if the given value is not nil.
func (sc *SeasonCreate) SetNillableAirDate(t *time.Time) *SeasonCreate {
	if t != nil {
		sc.SetAirDate(*t)
	}
	return sc
}

// SetEpisodeCount sets the "episode_count" field.
func (sc *SeasonCreate) SetEpisodeCount(i int) *SeasonCreate {
	sc.mutation.SetEpisodeCount(i)
	return sc
}

// SetBangumiID sets the "bangumi_id" field.
func (sc *SeasonCreate) SetBangumiID(i int) *SeasonCreate {
	sc.mutation.SetBangumiID(i)
	return sc
}

// SetNillableBangumiID sets the "bangumi_id" field if the given value is not nil.
func (sc *SeasonCreate) SetNillableBangumiID(i *int) *SeasonCreate {
	if i != nil {
		sc.SetBangumiID(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SeasonCreate) SetID(i int) *SeasonCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetBangumi sets the "bangumi" edge to the Bangumi entity.
func (sc *SeasonCreate) SetBangumi(b *Bangumi) *SeasonCreate {
	return sc.SetBangumiID(b.ID)
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (sc *SeasonCreate) AddEpisodeIDs(ids ...int) *SeasonCreate {
	sc.mutation.AddEpisodeIDs(ids...)
	return sc
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (sc *SeasonCreate) AddEpisodes(e ...*Episode) *SeasonCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return sc.AddEpisodeIDs(ids...)
}

// AddCastMemberIDs adds the "cast_members" edge to the CastMember entity by IDs.
func (sc *SeasonCreate) AddCastMemberIDs(ids ...int) *SeasonCreate {
	sc.mutation.AddCastMemberIDs(ids...)
	return sc
}

// AddCastMembers adds the "cast_members" edges to the CastMember entity.
func (sc *SeasonCreate) AddCastMembers(c ...*CastMember) *SeasonCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddCastMemberIDs(ids...)
}

// Mutation returns the SeasonMutation object of the builder.
func (sc *SeasonCreate) Mutation() *SeasonMutation {
	return sc.mutation
}

// Save creates the Season in the database.
func (sc *SeasonCreate) Save(ctx context.Context) (*Season, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SeasonCreate) SaveX(ctx context.Context) *Season {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SeasonCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SeasonCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SeasonCreate) check() error {
	if _, ok := sc.mutation.SeasonNumber(); !ok {
		return &ValidationError{Name: "season_number", err: errors.New(`ent: missing required field "Season.season_number"`)}
	}
	if v, ok := sc.mutation.SeasonNumber(); ok {
		if err := season.SeasonNumberValidator(v); err != nil {
			return &ValidationError{Name: "season_number", err: fmt.Errorf(`ent: validator failed for field "Season.season_number": %w`, err)}
		}
	}
	if _, ok := sc.mutation.EpisodeCount(); !ok {
		return &ValidationError{Name: "episode_count", err: errors.New(`ent: missing required field "Season.episode_count"`)}
	}
	if v, ok := sc.mutation.EpisodeCount(); ok {
		if err := season.EpisodeCountValidator(v); err != nil {
			return &ValidationError{Name: "episode_count", err: fmt.Errorf(`ent: validator failed for field "Season.episode_count": %w`, err)}
		}
	}
	if v, ok := sc.mutation.BangumiID(); ok {
		if err := season.BangumiIDValidator(v); err != nil {
			return &ValidationError{Name: "bangumi_id", err: fmt.Errorf(`ent: validator failed for field "Season.bangumi_id": %w`, err)}
		}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := season.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Season.id": %w`, err)}
		}
	}
	return nil
}

func (sc *SeasonCreate) sqlSave(ctx context.Context) (*Season, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SeasonCreate) createSpec() (*Season, *sqlgraph.CreateSpec) {
	var (
		_node = &Season{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(season.Table, sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.SeasonNumber(); ok {
		_spec.SetField(season.FieldSeasonNumber, field.TypeInt, value)
		_node.SeasonNumber = value
	}
	if value, ok := sc.mutation.AirDate(); ok {
		_spec.SetField(season.FieldAirDate, field.TypeTime, value)
		_node.AirDate = value
	}
	if value, ok := sc.mutation.EpisodeCount(); ok {
		_spec.SetField(season.FieldEpisodeCount, field.TypeInt, value)
		_node.EpisodeCount = value
	}
	if nodes := sc.mutation.BangumiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   season.BangumiTable,
			Columns: []string{season.BangumiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bangumi.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BangumiID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CastMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.CastMembersTable,
			Columns: []string{season.CastMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(castmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SeasonCreateBulk is the builder for creating many Season entities in bulk.
type SeasonCreateBulk struct {
	config
	err      error
	builders []*SeasonCreate
}

// Save creates the Season entities in the database.
func (scb *SeasonCreateBulk) Save(ctx context.Context) ([]*Season, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Season, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeasonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SeasonCreateBulk) SaveX(ctx context.Context) []*Season {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SeasonCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SeasonCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
