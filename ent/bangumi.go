// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nuomizi-fw/stargazer/ent/bangumi"
)

// Bangumi is the model entity for the Bangumi schema.
type Bangumi struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// EnglishTitle holds the value of the "english_title" field.
	EnglishTitle string `json:"english_title,omitempty"`
	// JapaneseTitle holds the value of the "japanese_title" field.
	JapaneseTitle string `json:"japanese_title,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Score holds the value of the "score" field.
	Score float64 `json:"score,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags string `json:"tags,omitempty"`
	// Synopsis holds the value of the "synopsis" field.
	Synopsis string `json:"synopsis,omitempty"`
	// CoverImage holds the value of the "cover_image" field.
	CoverImage string `json:"cover_image,omitempty"`
	// TrailerURL holds the value of the "trailer_url" field.
	TrailerURL string `json:"trailer_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BangumiQuery when eager-loading is set.
	Edges        BangumiEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BangumiEdges holds the relations/edges for other nodes in the graph.
type BangumiEdges struct {
	// Seasons holds the value of the seasons edge.
	Seasons []*Season `json:"seasons,omitempty"`
	// CastMembers holds the value of the cast_members edge.
	CastMembers []*CastMember `json:"cast_members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SeasonsOrErr returns the Seasons value or an error if the edge
// was not loaded in eager-loading.
func (e BangumiEdges) SeasonsOrErr() ([]*Season, error) {
	if e.loadedTypes[0] {
		return e.Seasons, nil
	}
	return nil, &NotLoadedError{edge: "seasons"}
}

// CastMembersOrErr returns the CastMembers value or an error if the edge
// was not loaded in eager-loading.
func (e BangumiEdges) CastMembersOrErr() ([]*CastMember, error) {
	if e.loadedTypes[1] {
		return e.CastMembers, nil
	}
	return nil, &NotLoadedError{edge: "cast_members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bangumi) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bangumi.FieldScore:
			values[i] = new(sql.NullFloat64)
		case bangumi.FieldID:
			values[i] = new(sql.NullInt64)
		case bangumi.FieldTitle, bangumi.FieldEnglishTitle, bangumi.FieldJapaneseTitle, bangumi.FieldType, bangumi.FieldStatus, bangumi.FieldTags, bangumi.FieldSynopsis, bangumi.FieldCoverImage, bangumi.FieldTrailerURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bangumi fields.
func (b *Bangumi) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bangumi.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bangumi.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				b.Title = value.String
			}
		case bangumi.FieldEnglishTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field english_title", values[i])
			} else if value.Valid {
				b.EnglishTitle = value.String
			}
		case bangumi.FieldJapaneseTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field japanese_title", values[i])
			} else if value.Valid {
				b.JapaneseTitle = value.String
			}
		case bangumi.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				b.Type = value.String
			}
		case bangumi.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				b.Status = value.String
			}
		case bangumi.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				b.Score = value.Float64
			}
		case bangumi.FieldTags:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value.Valid {
				b.Tags = value.String
			}
		case bangumi.FieldSynopsis:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field synopsis", values[i])
			} else if value.Valid {
				b.Synopsis = value.String
			}
		case bangumi.FieldCoverImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover_image", values[i])
			} else if value.Valid {
				b.CoverImage = value.String
			}
		case bangumi.FieldTrailerURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trailer_url", values[i])
			} else if value.Valid {
				b.TrailerURL = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bangumi.
// This includes values selected through modifiers, order, etc.
func (b *Bangumi) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QuerySeasons queries the "seasons" edge of the Bangumi entity.
func (b *Bangumi) QuerySeasons() *SeasonQuery {
	return NewBangumiClient(b.config).QuerySeasons(b)
}

// QueryCastMembers queries the "cast_members" edge of the Bangumi entity.
func (b *Bangumi) QueryCastMembers() *CastMemberQuery {
	return NewBangumiClient(b.config).QueryCastMembers(b)
}

// Update returns a builder for updating this Bangumi.
// Note that you need to call Bangumi.Unwrap() before calling this method if this Bangumi
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bangumi) Update() *BangumiUpdateOne {
	return NewBangumiClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bangumi entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bangumi) Unwrap() *Bangumi {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bangumi is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bangumi) String() string {
	var builder strings.Builder
	builder.WriteString("Bangumi(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("title=")
	builder.WriteString(b.Title)
	builder.WriteString(", ")
	builder.WriteString("english_title=")
	builder.WriteString(b.EnglishTitle)
	builder.WriteString(", ")
	builder.WriteString("japanese_title=")
	builder.WriteString(b.JapaneseTitle)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(b.Type)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(b.Status)
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", b.Score))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(b.Tags)
	builder.WriteString(", ")
	builder.WriteString("synopsis=")
	builder.WriteString(b.Synopsis)
	builder.WriteString(", ")
	builder.WriteString("cover_image=")
	builder.WriteString(b.CoverImage)
	builder.WriteString(", ")
	builder.WriteString("trailer_url=")
	builder.WriteString(b.TrailerURL)
	builder.WriteByte(')')
	return builder.String()
}

// Bangumis is a parsable slice of Bangumi.
type Bangumis []*Bangumi
